"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var nanoid_1 = require("nanoid");
var methods_1 = require("./methods");
// at 1000 IDs per second ~4 million years needed in order to have a 1% probability of at least one collision.
// => https://zelark.github.io/nano-id-cc/
var getNextRequestId = nanoid_1.customAlphabet('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-', 20);
var HEARTBEAT = 'â™¥';
function formatRequest(method, params, id) {
    return JSON.stringify({
        jsonrpc: '2.0',
        method: method,
        params: params,
        id: id,
    });
}
function tryParse(input) {
    try {
        return [null, JSON.parse(input)];
    }
    catch (error) {
        return [error];
    }
}
function addApiVersion(params, v) {
    return __assign(__assign({}, params), { apiVersion: v });
}
var finalizeWith = function (finalizer$) { return function (input$) {
    return input$.pipe(operators_1.finalize(function () { return finalizer$.pipe(operators_1.catchError(function () { return rxjs_1.EMPTY; })).subscribe(); }));
}; };
exports.createClient = function (connection$) {
    var _a = rxjs_1.partition(connection$.pipe(operators_1.switchMap(function (connection) { return rxjs_1.fromEvent(connection, 'message'); })), function (event) { return event.data === HEARTBEAT; }), heartbeats$ = _a[0], responses$ = _a[1];
    var parsedResponses$ = responses$.pipe(operators_1.mergeMap(function (response) {
        var _a = tryParse(response.data), err = _a[0], msg = _a[1];
        if (err) {
            console.warn('Unable to parse message: %s', err.message);
            return rxjs_1.EMPTY;
        }
        if (!msg || !msg.jsonrpc) {
            console.warn('Received empty or non-jsonrpc message: %s', msg);
            return rxjs_1.EMPTY;
        }
        return rxjs_1.of(msg);
    }), operators_1.share());
    function call(method, params) {
        if (params === void 0) { params = {}; }
        var requestId = getNextRequestId();
        return connection$.pipe(operators_1.take(1), operators_1.mergeMap(function (ws) {
            return rxjs_1.merge(parsedResponses$.pipe(operators_1.filter(function (rpcResult) { return rpcResult.id === requestId; }), operators_1.map(function (rpcResult) { return rpcResult.result; })), rxjs_1.defer(function () {
                ws.send(formatRequest(method, addApiVersion(params, 'v1'), requestId));
                return rxjs_1.EMPTY;
            }));
        }));
    }
    // Will call the rpc method and return an observable that emits the first reply and then ends
    function requestMethod(method, params) {
        return call(method, params).pipe(operators_1.take(1));
    }
    // Will call the rpc method with the '_subscribe' suffix and return an observable of all received messages and
    // keeps the subscription open forever/until unsubscribe
    function requestSubscribe(method, params) {
        return call(method + "_subscribe", params).pipe(operators_1.take(1), operators_1.mergeMap(function (subscriptionId) {
            return parsedResponses$.pipe(operators_1.filter(function (message) {
                return message.method === method + "_subscription" &&
                    message.params.subscription === subscriptionId;
            }), operators_1.map(function (message) { return message.params.result; }), finalizeWith(call(method + "_unsubscribe", { subscriptionId: subscriptionId })));
        }));
    }
    return {
        // heartbeat$ is a stream of date objects representing when the "last message was received"
        // it will keep the connection open until it is unsubscribed and can therefore be used to keep connection alive
        // between requests
        heartbeats: rxjs_1.merge(heartbeats$, responses$).pipe(operators_1.map(function () { return new Date(); })),
        request: function (method, params) {
            return isSubscribeMethod(method)
                ? requestSubscribe(method, params)
                : requestMethod(method, params);
        },
    };
};
function isSubscribeMethod(method) {
    return methods_1.SUBSCRIBE_METHODS.includes(method);
}
