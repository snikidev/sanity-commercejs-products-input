"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UntypedValueInput = UntypedValueInput;

var _react = _interopRequireDefault(require("react"));

var _schema = _interopRequireDefault(require("part:@sanity/base/schema"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _UnknownFields = _interopRequireDefault(require("../ObjectInput/styles/UnknownFields.css"));

var _Warning = _interopRequireDefault(require("../Warning"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function SetMissingTypeButton(_ref) {
  var value = _ref.value,
      targetType = _ref.targetType,
      onChange = _ref.onChange;

  var itemValue = _objectSpread(_objectSpread({}, value), {}, {
    _type: targetType
  });

  return /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: () => onChange(_PatchEvent.default.from((0, _PatchEvent.setIfMissing)(targetType, ['_type'])), itemValue),
    color: "primary"
  }, "Set ", /*#__PURE__*/_react.default.createElement("code", null, "_type"), " to ", /*#__PURE__*/_react.default.createElement("code", null, targetType));
}

function UnsetItemButton(_ref2) {
  var value = _ref2.value,
      onChange = _ref2.onChange,
      validTypes = _ref2.validTypes;

  // Doesn't matter which `_type` we use as long as it's allowed by the array
  var itemValue = _objectSpread(_objectSpread({}, value), {}, {
    _type: validTypes[0]
  });

  return /*#__PURE__*/_react.default.createElement(_default.default, {
    onClick: () => onChange(_PatchEvent.default.from((0, _PatchEvent.unset)()), itemValue),
    color: "danger"
  }, "Remove value");
}
/**
 * When the value does not have an `_type` property,
 * but the schema has a named type
 */


function UntypedValueInput(_ref3) {
  var validTypes = _ref3.validTypes,
      value = _ref3.value,
      onChange = _ref3.onChange;
  var isSingleValidType = validTypes.length === 1;

  var isHoistedType = _schema.default.has(validTypes[0]);

  var fix = isSingleValidType ? /*#__PURE__*/_react.default.createElement(SetMissingTypeButton, {
    onChange: onChange,
    targetType: validTypes[0],
    value: value
  }) : null;

  var message = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "Encountered an object value without a ", /*#__PURE__*/_react.default.createElement("code", null, "_type"), " property.", isSingleValidType && !isHoistedType && /*#__PURE__*/_react.default.createElement("div", null, "Either remove the ", /*#__PURE__*/_react.default.createElement("code", null, "name"), " property of the object declaration, or set", ' ', /*#__PURE__*/_react.default.createElement("code", null, "_type"), " property on items."), !isSingleValidType && /*#__PURE__*/_react.default.createElement("div", null, "The following types are valid here according to schema:", ' ', /*#__PURE__*/_react.default.createElement("ul", null, validTypes.map(validType => /*#__PURE__*/_react.default.createElement("li", {
    key: validType
  }, /*#__PURE__*/_react.default.createElement("code", null, validType))))), /*#__PURE__*/_react.default.createElement("h4", null, "object"), /*#__PURE__*/_react.default.createElement("pre", {
    className: _UnknownFields.default.inspectValue
  }, JSON.stringify(value, null, 2)), fix, fix && ' ', /*#__PURE__*/_react.default.createElement(UnsetItemButton, {
    onChange: onChange,
    validTypes: validTypes,
    value: value
  }));

  return /*#__PURE__*/_react.default.createElement(_Warning.default, {
    heading: "Content is missing _type",
    message: message
  });
}