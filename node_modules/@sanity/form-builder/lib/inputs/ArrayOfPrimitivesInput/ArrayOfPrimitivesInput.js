"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireDefault(require("react"));

var _paths = require("@sanity/util/paths");

var _default = require("part:@sanity/components/lists/default");

var _sortable = require("part:@sanity/components/lists/sortable");

var _functions = _interopRequireDefault(require("part:@sanity/form-builder/input/array/functions"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _PatchEvent = require("../../PatchEvent");

var _resolveTypeName = require("../../utils/resolveTypeName");

var _Warning = _interopRequireDefault(require("../Warning"));

var _getEmptyValue = _interopRequireDefault(require("./getEmptyValue"));

var _Item = _interopRequireDefault(require("./Item"));

var _ArrayOfPrimitivesInput = _interopRequireDefault(require("./ArrayOfPrimitivesInput.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NO_MARKERS = [];

function move(arr, from, to) {
  var copy = arr.slice();
  var val = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, val);
  return copy;
}

function insertAt(arr, index, item) {
  var copy = arr.slice();
  copy.splice(index + 1, 0, item);
  return copy;
}

class ArrayOfPrimitivesInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "_lastAddedIndex", -1);

    _defineProperty(this, "handleAppend", itemValue => {
      var _this$props = this.props,
          _this$props$value = _this$props.value,
          value = _this$props$value === void 0 ? [] : _this$props$value,
          onFocus = _this$props.onFocus;
      this.set(value.concat(itemValue));
      onFocus([value.length]);
    });

    _defineProperty(this, "handlePrepend", itemValue => {
      var _this$props2 = this.props,
          _this$props2$value = _this$props2.value,
          value = _this$props2$value === void 0 ? [] : _this$props2$value,
          onFocus = _this$props2.onFocus;
      this.set([itemValue].concat(value));
      onFocus([value.length]);
    });

    _defineProperty(this, "handleRemoveItem", index => {
      this.removeAt(index);
    });

    _defineProperty(this, "handleItemChange", event => {
      this._lastAddedIndex = -1;
      this.props.onChange(event);
    });

    _defineProperty(this, "handleItemEnterKey", index => {
      this.insertAt(index, this.props.type.of[0]);
      this._lastAddedIndex = index + 1;
    });

    _defineProperty(this, "handleItemEscapeKey", index => {
      var value = this.props.value;

      if (index === this._lastAddedIndex && value[index] === '') {
        this.removeAt(index);
      }
    });

    _defineProperty(this, "handleSortEnd", event => {
      var value = this.props.value;
      var oldIndex = event.oldIndex,
          newIndex = event.newIndex;
      this.set(move(value, oldIndex, newIndex));
    });

    _defineProperty(this, "renderItem", (item, index) => {
      var _this$props3 = this.props,
          type = _this$props3.type,
          _this$props3$level = _this$props3.level,
          level = _this$props3$level === void 0 ? 1 : _this$props3$level,
          markers = _this$props3.markers,
          compareValue = _this$props3.compareValue,
          focusPath = _this$props3.focusPath,
          onFocus = _this$props3.onFocus,
          readOnly = _this$props3.readOnly,
          onBlur = _this$props3.onBlur,
          presence = _this$props3.presence;
      var typeName = (0, _resolveTypeName.resolveTypeName)(item);
      var itemMemberType = this.getMemberType(typeName);

      if (!itemMemberType) {
        return null;
      }

      var isSortable = (0, _get2.default)(type, 'options.sortable') !== false;
      var ListItem = isSortable ? _sortable.Item : _default.Item;
      var filteredMarkers = markers.filter(marker => (0, _paths.startsWith)([index], marker.path));
      var childPresence = presence.filter(pItem => (0, _paths.startsWith)([index], pItem.path));
      return /*#__PURE__*/_react.default.createElement(ListItem, {
        key: index,
        index: index,
        className: _ArrayOfPrimitivesInput.default.item
      }, /*#__PURE__*/_react.default.createElement(_Item.default, {
        level: level + 1,
        index: index,
        value: item,
        compareValue: (compareValue || [])[index],
        readOnly: readOnly,
        markers: filteredMarkers.length === 0 ? NO_MARKERS : filteredMarkers,
        isSortable: isSortable,
        type: itemMemberType,
        focusPath: focusPath,
        onFocus: onFocus,
        onBlur: onBlur,
        onEnterKey: this.handleItemEnterKey,
        onEscapeKey: this.handleItemEscapeKey,
        onChange: this.handleItemChange,
        onRemove: this.handleRemoveItem,
        presence: childPresence
      }));
    });

    _defineProperty(this, "setElement", el => {
      this._element = el;
    });

    _defineProperty(this, "handleFocusItem", index => {
      this.props.onFocus([index]);
    });

    _defineProperty(this, "renderUnknownValueTypes", () => {
      var _this$props4 = this.props,
          value = _this$props4.value,
          readOnly = _this$props4.readOnly; // Find values with types not specified in the schema

      var unknownValues = (value || []).filter(v => {
        var typeName = (0, _resolveTypeName.resolveTypeName)(v);
        var itemMemberType = this.getMemberType(typeName);
        return !itemMemberType;
      }).map(v => ({
        value: v,
        type: (0, _resolveTypeName.resolveTypeName)(v)
      }));

      if (!unknownValues || unknownValues.length === 0) {
        return null;
      }

      var message = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("p", null, "These are not defined in the current schema as valid types for this array. This could mean that the type has been removed, or that someone else has added it to their own local schema that is not yet deployed."), unknownValues.map(item => /*#__PURE__*/_react.default.createElement("div", {
        key: item.type
      }, /*#__PURE__*/_react.default.createElement("h4", null, item.type), /*#__PURE__*/_react.default.createElement("pre", {
        className: _ArrayOfPrimitivesInput.default.inspectValue
      }, JSON.stringify(item.value, null, 2)), readOnly ? /*#__PURE__*/_react.default.createElement("div", null, "This array is ", /*#__PURE__*/_react.default.createElement("em", null, "read only"), " according to its enclosing schema type and values cannot be unset. If you want to unset a value, make sure you remove the", ' ', /*#__PURE__*/_react.default.createElement("strong", null, "readOnly"), " property from the enclosing type.") : /*#__PURE__*/_react.default.createElement(_default3.default, {
        onClick: () => this.handleRemoveItem(value.findIndex(v => v === item.value)),
        color: "danger"
      }, "Unset ", item.value))));

      return /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayOfPrimitivesInput.default.unknownValueTypes
      }, /*#__PURE__*/_react.default.createElement(_Warning.default, {
        values: unknownValues,
        message: message
      }));
    });
  }

  set(nextValue) {
    this._lastAddedIndex = -1;
    var patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
    this.props.onChange(_PatchEvent.PatchEvent.from(patch));
  }

  removeAt(index) {
    var _this$props$value2 = this.props.value,
        value = _this$props$value2 === void 0 ? [] : _this$props$value2;
    this.set(value.filter((_, i) => i !== index));
    this.props.onFocus([Math.max(0, index - 1)]);
  }

  insertAt(index, type) {
    var _this$props5 = this.props,
        _this$props5$value = _this$props5.value,
        value = _this$props5$value === void 0 ? [] : _this$props5$value,
        onFocus = _this$props5.onFocus;
    this.set(insertAt(value, index, (0, _getEmptyValue.default)(type)));
    onFocus([index + 1]);
  }

  getMemberType(typeName) {
    var type = this.props.type;
    return type.of.find(memberType => memberType.name === typeName || memberType.jsonType === typeName);
  }

  renderList(value) {
    var type = this.props.type;
    var isSortable = (0, _get2.default)(type, 'options.sortable') !== false;
    return isSortable ? /*#__PURE__*/_react.default.createElement(_sortable.List, {
      className: _ArrayOfPrimitivesInput.default.list,
      onSortEnd: this.handleSortEnd,
      helperClass: "ArrayOfPrimitivesInput__moving",
      useDragHandle: true
    }, value.map(this.renderItem)) : /*#__PURE__*/_react.default.createElement(_default.List, {
      decoration: "divider"
    }, value.map(this.renderItem));
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    var _this$props6 = this.props,
        type = _this$props6.type,
        value = _this$props6.value,
        _this$props6$level = _this$props6.level,
        level = _this$props6$level === void 0 ? 1 : _this$props6$level,
        markers = _this$props6.markers,
        readOnly = _this$props6.readOnly,
        onChange = _this$props6.onChange,
        onFocus = _this$props6.onFocus,
        presence = _this$props6.presence;
    return /*#__PURE__*/_react.default.createElement(_default2.default, {
      legend: type.title,
      description: type.description,
      level: level - 1,
      tabIndex: 0,
      onFocus: onFocus,
      ref: this.setElement,
      markers: markers,
      presence: presence.filter(item => item.path[0] === '$' || item.path.length === 0),
      changeIndicator: false
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayOfPrimitivesInput.default.root
    }, value && value.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayOfPrimitivesInput.default.list
    }, this.renderList(value)), this.renderUnknownValueTypes(), /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayOfPrimitivesInput.default.functions
    }, /*#__PURE__*/_react.default.createElement(_functions.default, {
      type: type,
      value: value,
      readOnly: readOnly,
      onAppendItem: this.handleAppend,
      onPrependItem: this.handlePrepend,
      onFocusItem: this.handleFocusItem,
      onCreateValue: _getEmptyValue.default,
      onChange: onChange
    }))));
  }

}

exports.default = ArrayOfPrimitivesInput;