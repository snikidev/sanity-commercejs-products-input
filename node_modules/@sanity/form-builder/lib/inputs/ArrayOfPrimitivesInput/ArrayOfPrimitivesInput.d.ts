import React from 'react';
import { ArraySchemaType, Marker, Path, SchemaType } from '@sanity/types';
import Fieldset from 'part:@sanity/components/fieldsets/default';
import { PatchEvent } from '../../PatchEvent';
declare type Primitive = string | number | boolean;
declare type Props = {
    type: ArraySchemaType<Primitive>;
    value: Primitive[];
    compareValue?: Primitive[];
    level: number;
    onChange: (event: PatchEvent) => void;
    onFocus: (path: Path) => void;
    onBlur: () => void;
    focusPath: Path;
    readOnly: boolean | null;
    markers: Marker[];
    presence: any;
};
export default class ArrayOfPrimitivesInput extends React.PureComponent<Props> {
    _element: Fieldset | null;
    _lastAddedIndex: number;
    set(nextValue: Primitive[]): void;
    removeAt(index: number): void;
    handleAppend: (itemValue: Primitive) => void;
    handlePrepend: (itemValue: Primitive) => void;
    insertAt(index: number, type: SchemaType): void;
    handleRemoveItem: (index: number) => void;
    handleItemChange: (event: PatchEvent) => void;
    handleItemEnterKey: (index: number) => void;
    handleItemEscapeKey: (index: number) => void;
    handleSortEnd: (event: {
        oldIndex: number;
        newIndex: number;
    }) => void;
    getMemberType(typeName: string): import("@sanity/types").BooleanSchemaType | import("@sanity/types").NumberSchemaType | import("@sanity/types").ObjectSchemaType | import("@sanity/types").StringSchemaType | import("@sanity/types").ReferenceSchemaType;
    renderItem: (item: Primitive, index: number) => JSX.Element;
    renderList(value: Primitive[]): JSX.Element;
    setElement: (el: Fieldset | null) => void;
    focus(): void;
    handleFocusItem: (index: number) => void;
    renderUnknownValueTypes: () => JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ArrayOfPrimitivesInput.d.ts.map