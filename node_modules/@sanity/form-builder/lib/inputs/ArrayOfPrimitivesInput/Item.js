"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _sortable = require("part:@sanity/components/lists/sortable");

var _dragHandleIcon = _interopRequireDefault(require("part:@sanity/base/drag-handle-icon"));

var _presence = require("@sanity/base/presence");

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _FormBuilderInput = require("../../FormBuilderInput");

var _getEmptyValue = _interopRequireDefault(require("./getEmptyValue"));

var _Item = _interopRequireDefault(require("./Item.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DragHandle = (0, _sortable.createDragHandle)(() => /*#__PURE__*/_react.default.createElement("span", {
  className: _Item.default.dragHandle
}, /*#__PURE__*/_react.default.createElement(_default.default, {
  icon: _dragHandleIcon.default,
  kind: "simple",
  padding: "small"
})));

class Item extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleRemove", () => {
      var _this$props = this.props,
          index = _this$props.index,
          onRemove = _this$props.onRemove;
      onRemove(index);
    });

    _defineProperty(this, "handleKeyPress", event => {
      var _this$props2 = this.props,
          index = _this$props2.index,
          onEnterKey = _this$props2.onEnterKey;

      if (event.key === 'Enter') {
        onEnterKey(index);
      }
    });

    _defineProperty(this, "handleKeyUp", event => {
      var _this$props3 = this.props,
          index = _this$props3.index,
          onRemove = _this$props3.onRemove,
          onEscapeKey = _this$props3.onEscapeKey,
          value = _this$props3.value;

      if (event.shiftKey && event.key === 'Backspace' && value === '') {
        onRemove(index);
      }

      if (event.key === 'Escape') {
        onEscapeKey(index);
      }
    });

    _defineProperty(this, "handleChange", patchEvent => {
      var _this$props4 = this.props,
          onChange = _this$props4.onChange,
          type = _this$props4.type,
          index = _this$props4.index;
      onChange(_PatchEvent.default.from(patchEvent.patches.map((patch // Map direct unset patches to empty value instead in order to not *remove* elements as the user clears out the value
      ) => patch.path.length === 0 && patch.type === 'unset' ? (0, _PatchEvent.set)((0, _getEmptyValue.default)(type)) : patch)).prefixAll(index));
    });
  }

  render() {
    var _this$props5 = this.props,
        value = _this$props5.value,
        level = _this$props5.level,
        markers = _this$props5.markers,
        index = _this$props5.index,
        focusPath = _this$props5.focusPath,
        onFocus = _this$props5.onFocus,
        onBlur = _this$props5.onBlur,
        compareValue = _this$props5.compareValue,
        type = _this$props5.type,
        readOnly = _this$props5.readOnly,
        isSortable = _this$props5.isSortable,
        presence = _this$props5.presence;
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.root
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.inner
    }, isSortable && !readOnly && /*#__PURE__*/_react.default.createElement(DragHandle, {
      className: _Item.default.dragHandle
    }), /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.input
    }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      value: value,
      path: [index],
      compareValue: compareValue,
      markers: markers,
      focusPath: focusPath,
      onFocus: onFocus,
      onBlur: onBlur,
      type: type,
      readOnly: readOnly || type.readOnly,
      onKeyUp: this.handleKeyUp,
      onKeyPress: this.handleKeyPress,
      onChange: this.handleChange,
      level: level,
      presence: presence
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.functions
    }, markers.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.validationStatusContainer
    }, /*#__PURE__*/_react.default.createElement(_status.default, {
      markers: markers
    })), (!type.title || type.title === '') && /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.presenceContainer
    }, /*#__PURE__*/_react.default.createElement(_presence.FieldPresence, {
      presence: presence,
      maxAvatars: 1
    })), !readOnly && /*#__PURE__*/_react.default.createElement("div", {
      className: _Item.default.removeButtonContainer
    }, /*#__PURE__*/_react.default.createElement(_default.default, {
      icon: _trashIcon.default,
      kind: "simple",
      onClick: this.handleRemove,
      padding: "small",
      title: "Delete"
    })))));
  }

}

exports.default = Item;