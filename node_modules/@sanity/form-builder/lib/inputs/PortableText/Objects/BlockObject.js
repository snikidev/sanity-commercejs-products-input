"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockObject = void 0;

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _types = require("@sanity/types");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _paths = require("@sanity/util/paths");

var _BlockObjectPreview = require("./BlockObjectPreview");

var _BlockObject = _interopRequireDefault(require("./BlockObject.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable react/prop-types */
var BlockObject = (_ref) => {
  var _ref$attributes = _ref.attributes,
      focused = _ref$attributes.focused,
      selected = _ref$attributes.selected,
      path = _ref$attributes.path,
      editor = _ref.editor,
      markers = _ref.markers,
      onFocus = _ref.onFocus,
      readOnly = _ref.readOnly,
      type = _ref.type,
      value = _ref.value;
  var errors = markers.filter(_types.isValidationErrorMarker);
  var classnames = (0, _classnames.default)([_BlockObject.default.root, focused && _BlockObject.default.focused, selected && _BlockObject.default.selected, errors.length > 0 && _BlockObject.default.hasErrors]);

  var handleClickToOpen = event => {
    if (focused) {
      event.preventDefault();
      event.stopPropagation();
      onFocus(path.concat(_paths.FOCUS_TERMINATOR));
    } else {
      onFocus(path);
    }
  };

  var handleEdit = () => {
    onFocus(path.concat(_paths.FOCUS_TERMINATOR));
  };

  var handleDelete = () => {
    _portableTextEditor.PortableTextEditor.delete(editor, {
      focus: {
        path,
        offset: 0
      },
      anchor: {
        path,
        offset: 0
      }
    }, {
      mode: 'block'
    });

    _portableTextEditor.PortableTextEditor.focus(editor);
  };

  var blockPreview = (0, _react.useMemo)(() => {
    return /*#__PURE__*/_react.default.createElement(_BlockObjectPreview.BlockObjectPreview, {
      type: type,
      value: value,
      path: path,
      readOnly: readOnly,
      onFocus: onFocus,
      onClickingDelete: handleDelete,
      onClickingEdit: handleEdit
    });
  }, [value, readOnly]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: classnames,
    onDoubleClick: handleClickToOpen
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _BlockObject.default.previewContainer,
    style: readOnly ? {
      cursor: 'default'
    } : {}
  }, blockPreview));
};

exports.BlockObject = BlockObject;