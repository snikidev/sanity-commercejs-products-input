"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverObjectEditing = void 0;

var _react = _interopRequireWildcard(require("react"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _presence = require("@sanity/base/presence");

var _FormBuilderInput = require("../../../../FormBuilderInput");

var _boundaryElement = require("../../boundaryElement");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PopoverObjectEditing = (_ref) => {
  var editorPath = _ref.editorPath,
      focusPath = _ref.focusPath,
      markers = _ref.markers,
      object = _ref.object,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onClose = _ref.onClose,
      onFocus = _ref.onFocus,
      path = _ref.path,
      presence = _ref.presence,
      readOnly = _ref.readOnly,
      type = _ref.type;
  var boundaryElement = (0, _boundaryElement.useBoundaryElement)();
  var editor = (0, _portableTextEditor.usePortableTextEditor)();

  var handleChange = patchEvent => onChange(patchEvent, path);

  var getEditorElement = () => {
    var _PortableTextEditor$f = _portableTextEditor.PortableTextEditor.findByPath(editor, editorPath),
        _PortableTextEditor$f2 = _slicedToArray(_PortableTextEditor$f, 1),
        editorObject = _PortableTextEditor$f2[0];

    return _portableTextEditor.PortableTextEditor.findDOMNode(editor, editorObject);
  };

  var _useState = (0, _react.useState)(getEditorElement()),
      _useState2 = _slicedToArray(_useState, 2),
      refElement = _useState2[0],
      setRefElement = _useState2[1];

  (0, _react.useEffect)(() => {
    setRefElement(getEditorElement());
  }, [object]);
  return /*#__PURE__*/_react.default.createElement(_popover.default, {
    boundaryElement: boundaryElement,
    fallbackPlacements: ['top', 'bottom'],
    placement: "bottom",
    portal: true,
    referenceElement: refElement,
    onClickOutside: onClose,
    onEscape: onClose,
    onClose: onClose,
    title: type.title,
    size: "small"
  }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, {
    margins: [0, 0, 1, 0]
  }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
    focusPath: focusPath,
    level: 0,
    markers: markers,
    onBlur: onBlur,
    onChange: handleChange,
    onFocus: onFocus,
    path: path,
    presence: presence,
    readOnly: readOnly || type.readOnly,
    type: type,
    value: object
  })));
};

exports.PopoverObjectEditing = PopoverObjectEditing;