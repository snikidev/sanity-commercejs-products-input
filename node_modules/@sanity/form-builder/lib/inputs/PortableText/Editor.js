"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _paths = require("@sanity/util/paths");

var _layer = require("part:@sanity/components/layer");

var _scroll = require("part:@sanity/components/scroll");

var _react = _interopRequireWildcard(require("react"));

var _PortableTextInput = _interopRequireDefault(require("./PortableTextInput.css"));

var _Toolbar = _interopRequireDefault(require("./Toolbar/Toolbar"));

var _expandCollapseButton = require("./expandCollapseButton");

var _BlockExtrasOverlay = _interopRequireDefault(require("./BlockExtrasOverlay"));

var _Decorator = _interopRequireDefault(require("./Text/Decorator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var renderDecorator = (mark, mType, attributes, defaultRender) => {
  return /*#__PURE__*/_react.default.createElement(_Decorator.default, {
    mark: mark
  }, defaultRender());
};

function PortableTextSanityEditor(props) {
  var initialSelection = props.initialSelection,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onCopy = props.onCopy,
      onFocus = props.onFocus,
      onFormBuilderChange = props.onFormBuilderChange,
      onPaste = props.onPaste,
      onToggleFullscreen = props.onToggleFullscreen,
      readOnly = props.readOnly,
      renderAnnotation = props.renderAnnotation,
      renderBlock = props.renderBlock,
      renderBlockActions = props.renderBlockActions,
      renderChild = props.renderChild,
      renderCustomMarkers = props.renderCustomMarkers,
      setScrollContainerElement = props.setScrollContainerElement,
      value = props.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var ptFeatures = (0, _react.useMemo)(() => _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor), []);
  var layer = (0, _layer.useLayer)();
  var isTopLayer = layer.depth === layer.size;

  var handleOpenObjectHotkey = (event, ptEditor) => {
    var selection = _portableTextEditor.PortableTextEditor.getSelection(ptEditor);

    if (selection) {
      event.preventDefault();
      event.stopPropagation();
      var focus = selection.focus;

      var activeAnnotations = _portableTextEditor.PortableTextEditor.activeAnnotations(ptEditor);

      var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(ptEditor);

      var focusChild = _portableTextEditor.PortableTextEditor.focusChild(ptEditor);

      if (activeAnnotations.length > 0) {
        onFocus([...focus.path.slice(0, 1), 'markDefs', {
          _key: activeAnnotations[0]._key
        }, _paths.FOCUS_TERMINATOR]);
        return;
      }

      if (focusChild && _portableTextEditor.PortableTextEditor.isVoid(ptEditor, focusChild)) {
        onFocus([...focus.path, _paths.FOCUS_TERMINATOR]);
        return;
      }

      if (focusBlock && _portableTextEditor.PortableTextEditor.isVoid(ptEditor, focusBlock)) {
        onFocus([...focus.path.slice(0, 1), _paths.FOCUS_TERMINATOR]);
      }
    }
  };

  var customFromProps = {
    custom: _objectSpread({
      'mod+enter': props.onToggleFullscreen
    }, (props.hotkeys || {}).custom)
  };
  var defaultHotkeys = {
    marks: {}
  };
  ptFeatures.decorators.forEach(dec => {
    switch (dec.value) {
      case 'strong':
        defaultHotkeys.marks['mod+b'] = dec.value;
        break;

      case 'em':
        defaultHotkeys.marks['mod+i'] = dec.value;
        break;

      case 'underline':
        defaultHotkeys.marks['mod+u'] = dec.value;
        break;

      case 'code':
        defaultHotkeys.marks["mod+'"] = dec.value;
        break;

      default: // Nothing

    }
  });
  var marksFromProps = {
    marks: _objectSpread(_objectSpread({}, defaultHotkeys.marks), (props.hotkeys || {}).marks)
  };

  var hotkeys = _objectSpread(_objectSpread({}, marksFromProps), customFromProps);

  var hasMarkers = markers.length > 0;
  var scClassNames = [_PortableTextInput.default.scrollContainer, ...(renderBlockActions || hasMarkers ? [_PortableTextInput.default.hasBlockExtras] : [_PortableTextInput.default.hasNoBlockExtras])].join(' ');
  var editorWrapperClassNames = [_PortableTextInput.default.editorWrapper].join(' ');
  var editorClassNames = [_PortableTextInput.default.editor, ...(renderBlockActions || hasMarkers ? [_PortableTextInput.default.hasBlockExtras] : [_PortableTextInput.default.hasNoBlockExtras])].join(' ');
  var blockExtras = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_BlockExtrasOverlay.default, {
    isFullscreen: isFullscreen,
    markers: markers,
    onFocus: onFocus,
    onChange: onFormBuilderChange,
    renderBlockActions: readOnly ? undefined : renderBlockActions,
    renderCustomMarkers: renderCustomMarkers,
    value: value
  }), [isFullscreen, value]); // Needed for rendering the overlay in the correct place when toggling fullscreen.

  var _useState = (0, _react.useState)(0),
      _useState2 = _slicedToArray(_useState, 2),
      forceUpdate = _useState2[0],
      setForceUpdate = _useState2[1];

  (0, _react.useEffect)(() => {
    setForceUpdate(forceUpdate + 1);
  }, []);
  (0, _react.useEffect)(() => {
    if (!isTopLayer || !isFullscreen) return undefined;

    var handleGlobalKeyDown = event => {
      if (event.key === 'Escape') {
        event.preventDefault();
        event.stopPropagation();
        onToggleFullscreen();
      }
    };

    window.addEventListener('keydown', handleGlobalKeyDown);
    return () => {
      window.removeEventListener('keydown', handleGlobalKeyDown);
    };
  }, [isFullscreen, isTopLayer, onToggleFullscreen]);

  var _editor = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.editorBox
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.header
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.toolbarContainer
  }, /*#__PURE__*/_react.default.createElement(_Toolbar.default, {
    isFullscreen: isFullscreen,
    hotkeys: hotkeys,
    onFocus: onFocus,
    renderBlock: renderBlock,
    readOnly: readOnly
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.fullscreenButtonContainer
  }, /*#__PURE__*/_react.default.createElement(_expandCollapseButton.ExpandCollapseButton, {
    isFullscreen: isFullscreen,
    onToggleFullscreen: onToggleFullscreen
  }))), /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, {
    className: scClassNames,
    ref: setScrollContainerElement
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: editorWrapperClassNames
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.blockExtras
  }, blockExtras()), /*#__PURE__*/_react.default.createElement("div", {
    className: editorClassNames
  }, /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditable, {
    hotkeys: hotkeys,
    onCopy: onCopy,
    onPaste: onPaste,
    placeholderText: value ? undefined : 'Empty',
    renderAnnotation: renderAnnotation,
    renderBlock: renderBlock,
    renderChild: renderChild,
    renderDecorator: renderDecorator,
    selection: initialSelection,
    spellCheck: true
  }))))), [initialSelection, isFullscreen, value, readOnly, forceUpdate]);

  return _editor;
}

var _default = PortableTextSanityEditor;
exports.default = _default;