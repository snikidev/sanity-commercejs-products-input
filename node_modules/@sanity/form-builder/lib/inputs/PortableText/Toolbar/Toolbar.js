"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _portableTextEditor = require("@sanity/portable-text-editor");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _ActionMenu = _interopRequireDefault(require("./ActionMenu"));

var _BlockStyleSelect = _interopRequireDefault(require("./BlockStyleSelect"));

var _InsertMenu = _interopRequireDefault(require("./InsertMenu"));

var _helpers = require("./helpers");

var _Toolbar = _interopRequireDefault(require("./Toolbar.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function PTEToolbar(props) {
  var hotkeys = props.hotkeys,
      isFullscreen = props.isFullscreen,
      readOnly = props.readOnly,
      onFocus = props.onFocus,
      renderBlock = props.renderBlock;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();
  var selection = (0, _portableTextEditor.usePortableTextEditorSelection)();
  var disabled = !selection;

  var actionGroups = _react.default.useMemo(() => editor ? (0, _helpers.getPTEToolbarActionGroups)(editor, selection, onFocus, hotkeys) : [], [editor, selection, onFocus, hotkeys]);

  var actionsLen = actionGroups.reduce((acc, x) => acc + x.actions.length, 0);

  var blockStyleSelectProps = _react.default.useMemo(() => editor ? (0, _helpers.getBlockStyleSelectProps)(editor) : null, [selection]);

  var insertMenuItems = _react.default.useMemo(() => editor ? (0, _helpers.getInsertMenuItems)(editor, selection, onFocus) : [], [selection]);

  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_Toolbar.default.root, isFullscreen && _Toolbar.default.fullscreen) // Ensure the editor doesn't lose focus when interacting
    // with the toolbar (prevent focus click events)
    ,
    onMouseDown: event => event.preventDefault(),
    onKeyPress: event => event.preventDefault()
  }, blockStyleSelectProps && blockStyleSelectProps.items.length > 1 && /*#__PURE__*/_react.default.createElement("div", {
    className: _Toolbar.default.blockStyleSelectContainer
  }, /*#__PURE__*/_react.default.createElement(_BlockStyleSelect.default, _extends({}, blockStyleSelectProps, {
    className: _Toolbar.default.blockStyleSelect,
    disabled: disabled,
    padding: "small",
    selection: selection,
    readOnly: readOnly,
    renderBlock: renderBlock
  }))), actionsLen > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _Toolbar.default.actionMenuContainer
  }, /*#__PURE__*/_react.default.createElement(_ActionMenu.default, {
    disabled: disabled,
    groups: actionGroups,
    readOnly: readOnly
  })), insertMenuItems.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _Toolbar.default.insertMenuContainer
  }, /*#__PURE__*/_react.default.createElement(_InsertMenu.default, {
    disabled: disabled,
    items: insertMenuItems,
    readOnly: readOnly
  })));
}

var _default = PTEToolbar;
exports.default = _default;