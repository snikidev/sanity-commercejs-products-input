import React from 'react';
import { Marker, ObjectSchemaTypeWithOptions, Path } from '@sanity/types';
import { FormFieldPresence } from '@sanity/base/presence';
import PatchEvent from '../../PatchEvent';
declare type ObjectInputProps = {
    type: ObjectSchemaTypeWithOptions;
    value?: Record<string, unknown>;
    compareValue?: Record<string, unknown>;
    onChange?: (...args: any[]) => any;
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    focusPath?: Path;
    markers?: Marker[];
    level?: number;
    readOnly?: boolean;
    isRoot?: boolean;
    filterField?: (...args: any[]) => any;
    presence: FormFieldPresence[];
};
export default class ObjectInput extends React.PureComponent<ObjectInputProps> {
    _firstField: any;
    static defaultProps: {
        onChange(): void;
        level: number;
        focusPath: any[];
        isRoot: boolean;
        filterField: () => boolean;
    };
    handleBlur(): void;
    handleFieldChange: (fieldEvent: PatchEvent, field: any) => void;
    renderField(field: any, level: any, index: any): JSX.Element;
    renderFieldset(fieldset: any, fieldsetIndex: any): JSX.Element;
    getRenderedFields(): JSX.Element[];
    renderUnknownFields(): JSX.Element;
    setFirstField: (el: any) => void;
    focus(): void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ObjectInput.d.ts.map