"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _speakingurl = _interopRequireDefault(require("speakingurl"));

var _types = require("@sanity/types");

var _ChangeIndicator = require("@sanity/base/lib/change-indicators/ChangeIndicator");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/textinputs/default"));

var _PatchEvent = require("../../PatchEvent");

var _withDocument = _interopRequireDefault(require("../../utils/withDocument"));

var _withValuePath = _interopRequireDefault(require("../../utils/withValuePath"));

var _SlugInput = _interopRequireDefault(require("./styles/SlugInput.css"));

var _class, _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Fallback slugify function if not defined in field options
var defaultSlugify = (value, type) => {
  var maxLength = type.options && type.options.maxLength || 200;
  var slugifyOpts = {
    truncate: maxLength,
    symbols: true
  };
  return value ? (0, _speakingurl.default)(value, slugifyOpts) : '';
};

var defaultState = {
  inputText: undefined,
  loading: false
};

var _default = (0, _withValuePath.default)((0, _withDocument.default)((_temp = _class = class SlugInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_textInput", void 0);

    _defineProperty(this, "_isMounted", void 0);

    _defineProperty(this, "_inputId", (0, _uniqueId2.default)('SlugInput'));

    _defineProperty(this, "state", defaultState);

    _defineProperty(this, "setTextInput", input => {
      this._textInput = input;
    });

    _defineProperty(this, "handleChange", event => {
      this.updateCurrent(event.target.value);
    });

    _defineProperty(this, "handleGenerateSlug", () => {
      var _type$options;

      var type = this.props.type;
      var source = (_type$options = type.options) === null || _type$options === void 0 ? void 0 : _type$options.source;

      if (!source) {
        // eslint-disable-next-line no-console
        console.error("Source is missing. Check source on type \"".concat(type.name, "\" in schema"));
        return;
      }

      this.setState({
        loading: true
      });
      this.getNewFromSource().then(newFromSource => this.slugify(newFromSource || '')).then(newSlug => this.updateCurrent(newSlug)).catch(err => {
        // eslint-disable-next-line no-console
        console.error("An error occured while slugifying:\n".concat(err.message, "\n").concat(err.stack));
      }).then(() => this._isMounted && this.setState({
        loading: false
      }));
    });

    _defineProperty(this, "hasSource", () => {
      var _type$options2;

      var _this$props = this.props,
          type = _this$props.type,
          document = _this$props.document;
      var source = (_type$options2 = type.options) === null || _type$options2 === void 0 ? void 0 : _type$options2.source;
      return typeof source === 'function' ? true : Boolean(PathUtils.get(document, source));
    });

    _defineProperty(this, "getNewFromSource", () => {
      var _type$options3;

      var _this$props2 = this.props,
          getValuePath = _this$props2.getValuePath,
          type = _this$props2.type,
          document = _this$props2.document;
      var parentPath = getValuePath().slice(0, -1);
      var parent = PathUtils.get(document, parentPath);
      var source = ((_type$options3 = type.options) === null || _type$options3 === void 0 ? void 0 : _type$options3.source) || [];
      return Promise.resolve(typeof source === 'function' ? source(document, {
        parentPath,
        parent
      }) : PathUtils.get(document, source));
    });
  }

  componentDidMount() {
    this._isMounted = true;
  }

  componentWillUnmount() {
    this._isMounted = false;
  }

  updateCurrent(current) {
    var _this$props3 = this.props,
        onChange = _this$props3.onChange,
        type = _this$props3.type;

    if (!current) {
      onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.unset)([])));
      return;
    }

    onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.setIfMissing)({
      _type: type.name
    }), (0, _PatchEvent.set)(current, ['current'])));
  }

  slugify(sourceValue) {
    if (!sourceValue) {
      return Promise.resolve(sourceValue);
    }

    var type = this.props.type;
    var slugify = type.options.slugify || defaultSlugify;
    return Promise.resolve(slugify(sourceValue, type));
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    var document = nextProps.document; // Reset state if document is changed

    var oldDocId = this.props.document._id;
    var newDocId = document._id;

    if (oldDocId !== newDocId) {
      this.setState(defaultState);
    }
  }

  focus() {
    if (this._textInput) {
      this._textInput.focus();
    }
  }

  render() {
    var _this$props4 = this.props,
        value = _this$props4.value,
        compareValue = _this$props4.compareValue,
        type = _this$props4.type,
        level = _this$props4.level,
        markers = _this$props4.markers,
        readOnly = _this$props4.readOnly,
        presence = _this$props4.presence;
    var _this$state = this.state,
        loading = _this$state.loading,
        inputText = _this$state.inputText;
    var hasSourceField = type.options && type.options.source;
    var formFieldProps = {
      label: type.title,
      description: type.description,
      level: level,
      markers,
      presence,
      labelFor: this._inputId
    };
    var errors = markers.filter(_types.isValidationErrorMarker);
    return /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicatorCompareValueProvider, {
      value: value === null || value === void 0 ? void 0 : value.current,
      compareValue: compareValue === null || compareValue === void 0 ? void 0 : compareValue.current
    }, /*#__PURE__*/_react.default.createElement(_default3.default, formFieldProps, /*#__PURE__*/_react.default.createElement("div", {
      className: _SlugInput.default.wrapper
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _SlugInput.default.input
    }, /*#__PURE__*/_react.default.createElement(_default4.default, {
      inputId: this._inputId,
      ref: this.setTextInput,
      customValidity: errors.length > 0 ? errors[0].item.message : '',
      disabled: loading,
      onChange: this.handleChange,
      value: typeof inputText === 'string' ? inputText : value.current,
      readOnly: readOnly
    })), hasSourceField && /*#__PURE__*/_react.default.createElement(_default2.default, {
      className: _SlugInput.default.button,
      disabled: readOnly || loading || !this.hasSource(),
      loading: loading,
      onClick: this.handleGenerateSlug,
      kind: "simple"
    }, "Generate"))));
  }

}, _defineProperty(_class, "defaultProps", {
  value: {
    current: undefined
  },
  readOnly: false,

  onChange() {},

  markers: []
}), _temp)));

exports.default = _default;