"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _react = _interopRequireDefault(require("react"));

var _types = require("@sanity/types");

var _paths = require("@sanity/util/paths");

var _ChangeIndicator = require("@sanity/base/lib/change-indicators/ChangeIndicator");

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _router = require("part:@sanity/base/router");

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _searchable = _interopRequireDefault(require("part:@sanity/components/selects/searchable"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));

var _Preview = _interopRequireDefault(require("../../Preview"));

var _subscriptionManager = _interopRequireDefault(require("../../utils/subscriptionManager"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _withDocument = _interopRequireDefault(require("../../utils/withDocument"));

var _withValuePath = _interopRequireDefault(require("../../utils/withValuePath"));

var _ReferenceInput = _interopRequireDefault(require("./styles/ReferenceInput.css"));

var _temp;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getInitialState = () => {
  return {
    isFetching: false,
    hits: [],
    previewSnapshot: null,
    isMissing: false,
    refCache: {}
  };
};

var _default = (0, _withValuePath.default)((0, _withDocument.default)((_temp = class ReferenceInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_lastQuery", '');

    _defineProperty(this, "_input", void 0);

    _defineProperty(this, "state", getInitialState());

    _defineProperty(this, "subscriptions", (0, _subscriptionManager.default)('search', 'previewSnapshot'));

    _defineProperty(this, "_inputId", (0, _uniqueId2.default)('ReferenceInput'));

    _defineProperty(this, "handleFocus", () => {
      var onFocus = this.props.onFocus;

      if (this._lastQuery) {
        this.search(this._lastQuery);
      }

      if (onFocus) {
        onFocus([_paths.FOCUS_TERMINATOR]);
      }
    });

    _defineProperty(this, "handleChange", item => {
      var type = this.props.type;
      this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.setIfMissing)({
        _type: type.name,
        _ref: item._id
      }), type.weak === true ? (0, _PatchEvent.set)(true, ['_weak']) : (0, _PatchEvent.unset)(['_weak']), (0, _PatchEvent.set)(item._id, ['_ref'])));
    });

    _defineProperty(this, "handleFixWeak", () => {
      var type = this.props.type;
      this.props.onChange(_PatchEvent.default.from(type.weak === true ? (0, _PatchEvent.set)(true, ['_weak']) : (0, _PatchEvent.unset)(['_weak'])));
    });

    _defineProperty(this, "handleClear", () => {
      this.props.onChange(_PatchEvent.default.from((0, _PatchEvent.unset)()));
    });

    _defineProperty(this, "handleSearch", query => {
      this.search(query);
    });

    _defineProperty(this, "handleOpen", () => {
      this.search('');
    });

    _defineProperty(this, "resolveUserDefinedFilter", () => {
      var _this$props = this.props,
          type = _this$props.type,
          document = _this$props.document,
          getValuePath = _this$props.getValuePath;
      var options = type.options;

      if (!options) {
        return {};
      }

      var filter = options.filter;
      var params = 'filterParams' in options ? options.filterParams : undefined;

      if (typeof filter === 'function') {
        var parentPath = getValuePath().slice(0, -1);
        var parent = (0, _paths.get)(document, parentPath);
        return filter({
          document,
          parentPath,
          parent
        });
      }

      return {
        filter,
        params
      };
    });

    _defineProperty(this, "search", query => {
      var _this$props2 = this.props,
          type = _this$props2.type,
          onSearch = _this$props2.onSearch;
      var options = this.resolveUserDefinedFilter();
      this.setState({
        isFetching: true
      });
      this.subscriptions.replace('search', onSearch(query, type, options).subscribe({
        next: items => {
          this.setState(prev => {
            var updatedCache = items.reduce((cache, item) => {
              cache[item._id] = item;
              return cache;
            }, Object.assign({}, prev.refCache));
            return {
              hits: items,
              isFetching: false,
              refCache: updatedCache
            };
          });
        },
        error: err => {
          var isQueryError = err.details && err.details.type === 'queryParseError';

          if (!isQueryError || !this.resolveUserDefinedFilter().filter) {
            throw err;
          }

          err.message = 'Invalid reference filter, please check `filter`!';
          throw err;
        }
      }));
    });

    _defineProperty(this, "renderHit", item => {
      var type = this.getMemberTypeFor(item._type);
      return /*#__PURE__*/_react.default.createElement(_Preview.default, {
        type: type,
        value: item,
        layout: "default"
      });
    });

    _defineProperty(this, "renderOpenItemElement", () => {
      var value = this.props.value;
      var _this$state = this.state,
          isMissing = _this$state.isMissing,
          previewSnapshot = _this$state.previewSnapshot;

      if (!value || !value._ref || isMissing) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
        title: previewSnapshot && "Open ".concat(previewSnapshot.title),
        intent: "edit",
        params: {
          id: value._ref,
          type: previewSnapshot ? previewSnapshot._type : undefined
        },
        className: _ReferenceInput.default.referenceLink
      }, /*#__PURE__*/_react.default.createElement(_linkIcon.default, null));
    });

    _defineProperty(this, "setInput", input => {
      this._input = input;
    });
  }

  componentWillUnmount() {
    this.subscriptions.unsubscribeAll();
  }

  componentDidMount() {
    this.getPreviewSnapshot(this.props.value);
  } // eslint-disable-next-line camelcase


  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.value !== this.props.value) {
      this.setState(getInitialState());
      this.getPreviewSnapshot(nextProps.value);
    }
  }

  getPreviewSnapshot(value) {
    if (!value || !value._ref) {
      return;
    }

    var _this$props3 = this.props,
        getPreviewSnapshot = _this$props3.getPreviewSnapshot,
        type = _this$props3.type;
    this.subscriptions.replace('previewSnapshot', getPreviewSnapshot(value, type).subscribe(snapshot => {
      this.setState({
        previewSnapshot: snapshot,
        isMissing: !snapshot
      });
    }));
  }

  getMemberTypeFor(typeName) {
    var type = this.props.type;
    return type.to.find(ofType => ofType.type.name === typeName);
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _this$props4 = this.props,
        type = _this$props4.type,
        value = _this$props4.value,
        level = _this$props4.level,
        markers = _this$props4.markers,
        readOnly = _this$props4.readOnly,
        presence = _this$props4.presence,
        compareValue = _this$props4.compareValue;
    var _this$state2 = this.state,
        previewSnapshot = _this$state2.previewSnapshot,
        isFetching = _this$state2.isFetching,
        isMissing = _this$state2.isMissing,
        hits = _this$state2.hits;
    var valueFromHit = value && hits.find(hit => hit._id === value._ref);
    var weakIs = value && value._weak ? 'weak' : 'strong';
    var weakShouldBe = type.weak === true ? 'weak' : 'strong';
    var hasRef = value && value._ref;
    var hasWeakMismatch = hasRef && !isMissing && weakIs !== weakShouldBe;
    var errors = markers.filter(_types.isValidationErrorMarker);
    var inputValue = value ? previewSnapshot && previewSnapshot.title : undefined;

    if (previewSnapshot && !previewSnapshot.title) {
      inputValue = 'Untitled document';
    }

    var isLoadingSnapshot = value && value._ref && !previewSnapshot;
    var placeholder = isLoadingSnapshot ? 'Loading…' : 'Type to search…';
    return /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicatorCompareValueProvider, {
      value: value === null || value === void 0 ? void 0 : value._ref,
      compareValue: compareValue === null || compareValue === void 0 ? void 0 : compareValue._ref
    }, /*#__PURE__*/_react.default.createElement(_default3.default, {
      labelFor: this._inputId,
      markers: markers,
      label: type.title,
      level: level,
      description: type.description,
      presence: presence
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: hasWeakMismatch || isMissing ? _ReferenceInput.default.hasWarnings : ''
    }, hasWeakMismatch && /*#__PURE__*/_react.default.createElement("div", {
      className: _ReferenceInput.default.weakRefMismatchWarning
    }, "Warning: This reference is ", /*#__PURE__*/_react.default.createElement("em", null, weakIs), ", but should be", ' ', /*#__PURE__*/_react.default.createElement("em", null, weakShouldBe), " according to schema.", /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_default2.default, {
      onClick: this.handleFixWeak
    }, "Convert to ", weakShouldBe))), /*#__PURE__*/_react.default.createElement(_searchable.default, {
      inputId: this._inputId,
      placeholder: readOnly ? '' : placeholder,
      title: isMissing && hasRef ? "Referencing nonexistent document (id: ".concat(value._ref || 'unknown', ")") : previewSnapshot && previewSnapshot.description,
      customValidity: errors.length > 0 ? errors[0].item.message : '',
      onOpen: this.handleOpen,
      onFocus: this.handleFocus,
      onSearch: this.handleSearch,
      onChange: this.handleChange,
      onClear: this.handleClear,
      openItemElement: this.renderOpenItemElement,
      value: valueFromHit || value,
      inputValue: isMissing ? '<nonexistent reference>' : inputValue,
      renderItem: this.renderHit,
      isLoading: isFetching || isLoadingSnapshot,
      items: hits,
      ref: this.setInput,
      readOnly: readOnly || isLoadingSnapshot
    }))));
  }

}, _temp)));

exports.default = _default;