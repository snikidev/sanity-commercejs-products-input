"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _types = require("@sanity/types");

var _paths = require("@sanity/util/paths");

var _classnames = _interopRequireDefault(require("classnames"));

var _formBuilder = _interopRequireDefault(require("config:@sanity/form-builder"));

var _functions = _interopRequireDefault(require("part:@sanity/form-builder/input/array/functions"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _react = _interopRequireDefault(require("react"));

var _operators = require("rxjs/operators");

var _PatchEvent = require("../../PatchEvent");

var _resolveTypeName = require("../../utils/resolveTypeName");

var _UploadTargetFieldset = _interopRequireDefault(require("../../utils/UploadTargetFieldset"));

var _Details = _interopRequireDefault(require("../common/Details"));

var _Warning = _interopRequireDefault(require("../Warning"));

var _item = require("./item");

var _randomKey = _interopRequireDefault(require("./randomKey"));

var _resolveListComponents = _interopRequireDefault(require("./resolveListComponents"));

var _ArrayInput = _interopRequireDefault(require("./ArrayInput.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NO_MARKERS = [];
var SUPPORT_DIRECT_UPLOADS = (0, _get2.default)(_formBuilder.default, 'images.directUploads');

function createProtoValue(type) {
  if (!(0, _types.isObjectSchemaType)(type)) {
    throw new Error("Invalid item type: \"".concat(type.type, "\". Default array input can only contain objects (for now)"));
  }

  var _key = (0, _randomKey.default)(12);

  return type.name === 'object' ? {
    _key
  } : {
    _type: type.name,
    _key
  };
}

class ArrayInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      isMoving: false
    });

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "uploadSubscriptions", {});

    _defineProperty(this, "insert", (itemValue, position, atIndex) => {
      var onChange = this.props.onChange;
      onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.setIfMissing)([]), (0, _PatchEvent.insert)([itemValue], position, [atIndex])));
    });

    _defineProperty(this, "handlePrepend", value => {
      this.insert(value, 'before', 0);
      this.handleFocusItem(value);
    });

    _defineProperty(this, "handleAppend", value => {
      this.insert(value, 'after', -1);
      this.handleFocusItem(value);
    });

    _defineProperty(this, "handleRemoveItem", item => {
      this.removeItem(item);
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.onFocus([_paths.FOCUS_TERMINATOR]);
    });

    _defineProperty(this, "handleFocusItem", item => {
      this.props.onFocus([{
        _key: item._key
      }, _paths.FOCUS_TERMINATOR]);
    });

    _defineProperty(this, "handleItemChange", (event, item) => {
      var _this$props = this.props,
          onChange = _this$props.onChange,
          value = _this$props.value;
      var memberType = this.getMemberTypeOfItem(item);

      if (!memberType) {
        // eslint-disable-next-line no-console
        console.log('Could not find member type of item ', item);
        return;
      }

      if (memberType.readOnly) {
        return;
      }

      var key = item._key || (0, _randomKey.default)(12);
      onChange(event.prefixAll({
        _key: key
      }).prepend(item._key ? [] : (0, _PatchEvent.set)(key, [value.indexOf(item), '_key'])));
    });

    _defineProperty(this, "handleSortStart", () => {
      this.setState({
        isMoving: true
      });
    });

    _defineProperty(this, "handleSortEnd", event => {
      this.setState({
        isMoving: false
      });
      var _this$props2 = this.props,
          value = _this$props2.value,
          onChange = _this$props2.onChange;
      var item = value[event.oldIndex];
      var refItem = value[event.newIndex];

      if (!item._key || !refItem._key) {
        // eslint-disable-next-line no-console
        console.error('Neither the item you are moving nor the item you are moving to have a key. Cannot continue.');
        return;
      }

      if (event.oldIndex === event.newIndex || item._key === refItem._key) {
        return;
      }

      onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.unset)([{
        _key: item._key
      }]), (0, _PatchEvent.insert)([item], event.oldIndex > event.newIndex ? 'before' : 'after', [{
        _key: refItem._key
      }])));
    });

    _defineProperty(this, "renderList", () => {
      var _this$props3 = this.props,
          type = _this$props3.type,
          markers = _this$props3.markers,
          readOnly = _this$props3.readOnly,
          value = _this$props3.value,
          focusPath = _this$props3.focusPath,
          onBlur = _this$props3.onBlur,
          onFocus = _this$props3.onFocus,
          level = _this$props3.level,
          compareValue = _this$props3.compareValue,
          filterField = _this$props3.filterField,
          presence = _this$props3.presence;
      var isMoving = this.state.isMoving;
      var options = type.options || {};
      var hasMissingKeys = value.some(item => !item._key);
      var isSortable = options.sortable !== false && !hasMissingKeys;
      var isGrid = options.layout === 'grid';

      var _resolveListComponent = (0, _resolveListComponents.default)(isSortable, isGrid),
          List = _resolveListComponent.List,
          Item = _resolveListComponent.Item;

      var listProps = isSortable ? {
        helperClass: 'ArrayInput__moving',
        onSortEnd: this.handleSortEnd,
        onSortStart: this.handleSortStart,
        lockToContainerEdges: true,
        useDragHandle: true
      } : {};
      var listClassName = (0, _classnames.default)(isGrid ? _ArrayInput.default.grid : _ArrayInput.default.list, readOnly && _ArrayInput.default.readOnly, isMoving && _ArrayInput.default.moving);
      return /*#__PURE__*/_react.default.createElement(List, _extends({
        className: listClassName
      }, listProps), value.map((item, index) => {
        var isChildMarker = marker => (0, _paths.startsWith)([index], marker.path) || (0, _paths.startsWith)([{
          _key: item && item._key
        }], marker.path);

        var childMarkers = markers.filter(isChildMarker);

        var isChildPresence = pItem => (0, _paths.startsWith)([index], pItem.path) || (0, _paths.startsWith)([{
          _key: item && item._key
        }], pItem.path);

        var childPresence = presence.filter(isChildPresence);
        var itemProps = isSortable ? {
          index
        } : {};
        return /*#__PURE__*/_react.default.createElement(Item, _extends({
          className: isGrid ? _ArrayInput.default.gridItem : _ArrayInput.default.listItem,
          key: item._key || index
        }, itemProps), /*#__PURE__*/_react.default.createElement(_item.ArrayInputItem, {
          compareValue: compareValue,
          filterField: filterField,
          focusPath: focusPath,
          index: index,
          level: level,
          markers: childMarkers.length === 0 ? NO_MARKERS : childMarkers,
          onBlur: onBlur,
          onChange: this.handleItemChange,
          onFocus: onFocus,
          onRemove: this.handleRemoveItem,
          presence: childPresence,
          readOnly: readOnly || hasMissingKeys,
          type: type,
          value: item
        }));
      }));
    });

    _defineProperty(this, "setElement", el => {
      this._element = el;
    });

    _defineProperty(this, "getUploadOptions", file => {
      var _this$props4 = this.props,
          type = _this$props4.type,
          resolveUploader = _this$props4.resolveUploader;

      if (!resolveUploader) {
        return [];
      }

      return type.of.map(memberType => ({
        type: memberType,
        uploader: resolveUploader(memberType, file)
      })).filter(member => member.uploader);
    });

    _defineProperty(this, "handleFixMissingKeys", () => {
      var _this$props5 = this.props,
          onChange = _this$props5.onChange,
          value = _this$props5.value;
      var patches = value.map((val, i) => (0, _PatchEvent.setIfMissing)((0, _randomKey.default)(), [i, '_key']));
      onChange(_PatchEvent.PatchEvent.from(...patches));
    });

    _defineProperty(this, "handleRemoveNonObjectValues", () => {
      var _this$props6 = this.props,
          onChange = _this$props6.onChange,
          value = _this$props6.value;
      var nonObjects = value.reduce((acc, val, i) => (0, _isPlainObject2.default)(val) ? acc : acc.concat(i), []).reverse();
      var patches = nonObjects.map(index => (0, _PatchEvent.unset)([index]));
      onChange(_PatchEvent.PatchEvent.from(...patches));
    });

    _defineProperty(this, "handleUpload", (_ref) => {
      var file = _ref.file,
          type = _ref.type,
          uploader = _ref.uploader;
      var onChange = this.props.onChange;
      var item = createProtoValue(type);
      var key = item._key;
      this.insert(item, 'after', -1);
      var events$ = uploader.upload(file, type).pipe((0, _operators.map)(uploadEvent => _PatchEvent.PatchEvent.from(uploadEvent.patches).prefixAll({
        _key: key
      })));
      this.uploadSubscriptions = _objectSpread(_objectSpread({}, this.uploadSubscriptions), {}, {
        [key]: events$.subscribe(onChange)
      });
    });

    _defineProperty(this, "renderUnknownValueTypes", () => {
      var _this$props7 = this.props,
          value = _this$props7.value,
          type = _this$props7.type,
          readOnly = _this$props7.readOnly;
      var knownTypes = (type.of || []).map(t => t.name).filter(typeName => typeName !== 'object');
      var unknownValues = (value || []).filter(v => v._type && !knownTypes.includes(v._type));

      if (!unknownValues || unknownValues.length < 1) {
        return null;
      }

      var message = /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, "These are not defined in the current schema as valid types for this array. This could mean that the type has been removed, or that someone else has added it to their own local schema that is not yet deployed.", unknownValues.map(item => {
        return /*#__PURE__*/_react.default.createElement("div", {
          key: item._type
        }, /*#__PURE__*/_react.default.createElement("h4", null, item._type), /*#__PURE__*/_react.default.createElement("pre", {
          className: _ArrayInput.default.inspectValue
        }, JSON.stringify(item, null, 2)), readOnly ? /*#__PURE__*/_react.default.createElement("div", null, "This array is ", /*#__PURE__*/_react.default.createElement("em", null, "read only"), " according to its enclosing schema type and values cannot be unset. If you want to unset a value, make sure you remove the", ' ', /*#__PURE__*/_react.default.createElement("strong", null, "readOnly"), " property from the enclosing type.") : /*#__PURE__*/_react.default.createElement(_default.default, {
          onClick: () => this.handleRemoveItem(item),
          color: "danger"
        }, "Unset ", item._type));
      }));

      return /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.unknownValueTypes
      }, /*#__PURE__*/_react.default.createElement(_Warning.default, {
        message: message,
        values: unknownValues
      }));
    });
  }

  removeItem(item) {
    var _this$props8 = this.props,
        onChange = _this$props8.onChange,
        onFocus = _this$props8.onFocus,
        value = _this$props8.value;
    onChange(_PatchEvent.PatchEvent.from((0, _PatchEvent.unset)(item._key ? [{
      _key: item._key
    }] : [value.indexOf(item)])));

    if (item._key in this.uploadSubscriptions) {
      this.uploadSubscriptions[item._key].unsubscribe();
    }

    var idx = value.indexOf(item);
    var nextItem = value[idx + 1] || value[idx - 1];
    onFocus([nextItem ? {
      _key: nextItem._key
    } : _paths.FOCUS_TERMINATOR]);
  }

  getMemberTypeOfItem(item) {
    var type = this.props.type;
    var itemTypeName = (0, _resolveTypeName.resolveTypeName)(item);
    return type.of.find(memberType => memberType.name === itemTypeName);
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    var _this$props9 = this.props,
        type = _this$props9.type,
        _this$props9$level = _this$props9.level,
        level = _this$props9$level === void 0 ? 1 : _this$props9$level,
        markers = _this$props9.markers,
        readOnly = _this$props9.readOnly,
        onChange = _this$props9.onChange,
        value = _this$props9.value,
        presence = _this$props9.presence;
    var hasNonObjectValues = (value || []).some(item => !(0, _isPlainObject2.default)(item));

    if (hasNonObjectValues) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        legend: type.title,
        description: type.description,
        level: level - 1,
        tabIndex: 0,
        onFocus: this.handleFocus,
        ref: this.setElement,
        markers: markers
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.nonObjectsWarning
      }, "Some items in this list are not objects. We need to remove them before the list can be edited.", /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.removeNonObjectsButtonWrapper
      }, /*#__PURE__*/_react.default.createElement(_default.default, {
        onClick: this.handleRemoveNonObjectValues
      }, "Remove non-object values")), /*#__PURE__*/_react.default.createElement(_Details.default, {
        title: /*#__PURE__*/_react.default.createElement("b", null, "Why is this happening?")
      }, "This usually happens when items are created through an API client from outside the Content Studio and sets invalid data, or a custom input component have inserted incorrect values into the list.")));
    }

    var hasMissingKeys = (value || []).some(item => !item._key);

    if (hasMissingKeys) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        legend: type.title,
        description: type.description,
        level: level - 1,
        tabIndex: 0,
        onFocus: this.handleFocus,
        ref: this.setElement,
        markers: markers,
        changeIndicator: false
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.missingKeysWarning
      }, "Some items in this list are missing their keys. We need to fix this before the list can be edited.", /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInput.default.fixMissingKeysButtonWrapper
      }, /*#__PURE__*/_react.default.createElement(_default.default, {
        onClick: this.handleFixMissingKeys
      }, "Fix missing keys")), /*#__PURE__*/_react.default.createElement(_Details.default, {
        title: /*#__PURE__*/_react.default.createElement("b", null, "Why is this happening?")
      }, "This usually happens when items are created through the API client from outside the Content Studio and someone forgets to set the ", /*#__PURE__*/_react.default.createElement("code", null, "_key"), "-property of list items.", /*#__PURE__*/_react.default.createElement("p", null, "The value of the ", /*#__PURE__*/_react.default.createElement("code", null, "_key"), " can be any ", /*#__PURE__*/_react.default.createElement("b", null, "string"), " as long as it is", ' ', /*#__PURE__*/_react.default.createElement("b", null, "unique"), " for each element within the array."))), this.renderList());
    }

    var FieldSetComponent = SUPPORT_DIRECT_UPLOADS ? _UploadTargetFieldset.default : _default2.default;
    var uploadProps = SUPPORT_DIRECT_UPLOADS ? {
      getUploadOptions: this.getUploadOptions,
      onUpload: this.handleUpload
    } : {};
    return /*#__PURE__*/_react.default.createElement(FieldSetComponent, _extends({
      markers: markers,
      tabIndex: 0,
      legend: type.title,
      description: type.description,
      level: level - 1,
      className: _ArrayInput.default.root,
      onFocus: this.handleFocus,
      type: type,
      ref: this.setElement,
      presence: presence.filter(item => item.path[0] === '$'),
      changeIndicator: false
    }, uploadProps), /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInput.default.inner
    }, value && value.length > 0 && this.renderList(), this.renderUnknownValueTypes(), /*#__PURE__*/_react.default.createElement(_functions.default, {
      className: _ArrayInput.default.functions,
      type: type,
      value: value,
      readOnly: readOnly,
      onAppendItem: this.handleAppend,
      onPrependItem: this.handlePrepend,
      onFocusItem: this.handleFocusItem,
      onCreateValue: createProtoValue,
      onChange: onChange
    })));
  }

}

exports.default = ArrayInput;

_defineProperty(ArrayInput, "defaultProps", {
  focusPath: []
});