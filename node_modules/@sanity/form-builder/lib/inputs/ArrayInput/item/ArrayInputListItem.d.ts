import { ArraySchemaType, Marker, Path, SchemaType } from '@sanity/types';
import { FormFieldPresence } from '@sanity/base/presence';
import React from 'react';
import PatchEvent from '../../../PatchEvent';
import { ItemValue } from '../typedefs';
interface ArrayInputListItemProps {
    type: ArraySchemaType;
    value: ItemValue;
    index: number;
    compareValue?: any[];
    level: number;
    markers: Marker[];
    layout?: 'media' | 'default';
    onRemove: (value: ItemValue) => void;
    onChange: (event: PatchEvent, value: ItemValue) => void;
    onFocus: (path: Path) => void;
    onBlur: () => void;
    filterField: () => any;
    readOnly: boolean | null;
    focusPath: Path;
    presence: FormFieldPresence[];
}
export declare class ArrayInputListItem extends React.PureComponent<ArrayInputListItemProps> {
    _focusArea: HTMLDivElement | null;
    innerElement: HTMLDivElement | null;
    static defaultProps: {
        level: number;
        markers: any[];
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: ArrayInputListItemProps): void;
    handleEditStart: () => void;
    handleFocus: () => void;
    handleEditStop: () => void;
    handleKeyPress: (event: React.KeyboardEvent<any>) => void;
    handleRemove: () => void;
    handleChange: (event: PatchEvent, valueOverride?: ItemValue) => void;
    getMemberType(): SchemaType | null;
    getTitle(): string;
    setFocus(path?: Path): void;
    focus(): void;
    setFocusArea: (el: HTMLDivElement | null) => void;
    renderEditItemForm(item: ItemValue): JSX.Element;
    setInnerElement: (el: HTMLDivElement | null) => void;
    renderItem(): JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ArrayInputListItem.d.ts.map