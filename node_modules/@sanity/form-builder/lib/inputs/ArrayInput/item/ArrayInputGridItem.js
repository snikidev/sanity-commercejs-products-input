"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayInputGridItem = void 0;

var _changeIndicators = require("@sanity/base/lib/change-indicators");

var _ChangeIndicator = require("@sanity/base/lib/change-indicators/ChangeIndicator");

var _types = require("@sanity/types");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _dragHandleIcon = _interopRequireDefault(require("part:@sanity/base/drag-handle-icon"));

var _linkIcon = _interopRequireDefault(require("part:@sanity/base/link-icon"));

var _presence2 = require("@sanity/base/presence");

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _intent = _interopRequireDefault(require("part:@sanity/components/buttons/intent"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _fullscreen = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _fold = _interopRequireDefault(require("part:@sanity/components/edititem/fold"));

var _sortable = require("part:@sanity/components/lists/sortable");

var _status = _interopRequireDefault(require("part:@sanity/components/validation/status"));

var _react = _interopRequireDefault(require("react"));

var _FormBuilderInput = require("../../../FormBuilderInput");

var _Preview = _interopRequireDefault(require("../../../Preview"));

var _resolveTypeName = require("../../../utils/resolveTypeName");

var _ConfirmButton = _interopRequireDefault(require("../ConfirmButton"));

var _InvalidItem = _interopRequireDefault(require("../InvalidItem"));

var _helpers = require("./helpers");

var _ArrayInputGridItem = _interopRequireDefault(require("./ArrayInputGridItem.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DragHandle = (0, _sortable.createDragHandle)(() => /*#__PURE__*/_react.default.createElement("span", {
  className: _ArrayInputGridItem.default.dragHandle
}, /*#__PURE__*/_react.default.createElement(_default.default, {
  "aria-hidden": "true",
  icon: _dragHandleIcon.default,
  kind: "simple",
  padding: "small",
  tabIndex: -1
})));

class ArrayInputGridItem extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_focusArea", void 0);

    _defineProperty(this, "handleEditStart", () => {
      this.setFocus([PathUtils.FOCUS_TERMINATOR]);
    });

    _defineProperty(this, "handleFocus", () => {
      this.setFocus();
    });

    _defineProperty(this, "handleEditStop", () => {
      if ((0, _helpers.isEmpty)(this.props.value)) {
        this.handleRemove();
      } else {
        this.setFocus();
      }
    });

    _defineProperty(this, "handleKeyPress", event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        this.setFocus([PathUtils.FOCUS_TERMINATOR]);
      }
    });

    _defineProperty(this, "handleRemove", () => {
      var _this$props = this.props,
          onRemove = _this$props.onRemove,
          value = _this$props.value;
      onRemove(value);
    });

    _defineProperty(this, "handleChange", (event, valueOverride) => {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          value = _this$props2.value;
      onChange(event, typeof valueOverride === 'undefined' ? value : valueOverride);
    });

    _defineProperty(this, "setFocusArea", el => {
      this._focusArea = el;
    });
  }

  componentDidMount() {
    var _this$props3 = this.props,
        focusPath = _this$props3.focusPath,
        value = _this$props3.value;

    if (value._key && (0, _helpers.hasFocusInPath)(focusPath, value)) {
      this.focus();
    }
  }

  componentDidUpdate(prevProps) {
    var hadFocus = (0, _helpers.hasFocusInPath)(prevProps.focusPath, prevProps.value);
    var hasFocus = (0, _helpers.hasFocusInPath)(this.props.focusPath, this.props.value);

    if (!hadFocus && hasFocus) {
      this.focus();
    }
  }

  getMemberType() {
    var _this$props4 = this.props,
        value = _this$props4.value,
        type = _this$props4.type;
    var itemTypeName = (0, _resolveTypeName.resolveTypeName)(value);
    return itemTypeName === 'object' && type.of.length === 1 ? type.of[0] : type.of.find(memberType => memberType.name === itemTypeName);
  }

  getTitle() {
    var readOnly = this.props.readOnly;
    var memberType = this.getMemberType();

    if (readOnly || memberType.readOnly) {
      return memberType.title || '';
    }

    return memberType.title ? "Edit ".concat(memberType.title) : 'Edit';
  }

  setFocus() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var _this$props5 = this.props,
        value = _this$props5.value,
        onFocus = _this$props5.onFocus;
    onFocus([{
      _key: value._key
    }, ...path]);
  }

  focus() {
    if (this._focusArea) {
      this._focusArea.focus();
    }
  }

  renderEditItemForm(item) {
    var _this$props6 = this.props,
        type = _this$props6.type,
        markers = _this$props6.markers,
        focusPath = _this$props6.focusPath,
        onFocus = _this$props6.onFocus,
        onBlur = _this$props6.onBlur,
        index = _this$props6.index,
        readOnly = _this$props6.readOnly,
        filterField = _this$props6.filterField,
        presence = _this$props6.presence,
        compareValue = _this$props6.compareValue;
    var options = type.options || {};
    var memberType = this.getMemberType();
    var childMarkers = markers.filter(marker => marker.path.length > 1);
    var childPresence = presence.filter(_presence => _presence.path.length > 1);

    var content = /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      type: memberType,
      level: 0,
      value: (0, _helpers.isEmpty)(item) ? undefined : item,
      onChange: this.handleChange,
      onFocus: onFocus,
      onBlur: onBlur,
      compareValue: compareValue,
      focusPath: focusPath,
      readOnly: readOnly || memberType.readOnly,
      markers: childMarkers,
      path: [item._key ? {
        _key: item._key
      } : index],
      filterField: filterField,
      presence: childPresence
    }); // NOTE: Test focus issues by uncommenting the next line
    // return content


    var title = this.getTitle();

    if (options.editModal === 'fullscreen') {
      return /*#__PURE__*/_react.default.createElement(_fullscreen.default, {
        title: title,
        onClose: this.handleEditStop,
        isOpen: true
      }, content);
    }

    if (options.editModal === 'fold') {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_fold.default, {
        title: title,
        onClose: this.handleEditStop
      }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
        margins: [0, 0, 1, 0]
      }, content)));
    }

    if (options.editModal === 'popover') {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: _ArrayInputGridItem.default.popupAnchor
      }, /*#__PURE__*/_react.default.createElement(_popover.default, {
        title: title,
        onClose: this.handleEditStop,
        onEscape: this.handleEditStop,
        onClickOutside: this.handleEditStop,
        placement: "auto"
      }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
        margins: [0, 0, 1, 0]
      }, content)));
    }

    return /*#__PURE__*/_react.default.createElement(_default2.default, {
      onClose: this.handleEditStop,
      key: item._key || index,
      title: title
    }, /*#__PURE__*/_react.default.createElement(_presence2.PresenceOverlay, {
      margins: [0, 0, 1, 0]
    }, content));
  }

  renderItem() {
    var _this$props7 = this.props,
        value = _this$props7.value,
        markers = _this$props7.markers,
        type = _this$props7.type,
        index = _this$props7.index,
        readOnly = _this$props7.readOnly,
        presence = _this$props7.presence,
        focusPath = _this$props7.focusPath;
    var options = type.options || {};
    var isSortable = !readOnly && !type.readOnly && options.sortable !== false;
    var validation = markers.filter(_types.isValidationMarker);
    var scopedValidation = validation.map(marker => {
      if (marker.path.length <= 1) {
        return marker;
      }

      var level = marker.level === 'error' ? 'errors' : 'warnings';
      return Object.assign({}, marker, {
        item: marker.item.cloneWithMessage("Contains ".concat(level))
      });
    }).filter(Boolean);
    var hasItemFocus = PathUtils.isExpanded((0, _helpers.pathSegmentFrom)(value), focusPath);
    var memberType = this.getMemberType();

    if (!memberType) {
      return /*#__PURE__*/_react.default.createElement(_InvalidItem.default, {
        onChange: this.handleChange,
        type: type,
        value: value
      });
    }

    return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorScope, {
      path: [value._key ? {
        _key: value._key
      } : index]
    }, /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ContextProvidedChangeIndicator, {
      compareDeep: true,
      disabled: hasItemFocus
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.inner
    }, /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: 0,
      onClick: value._key && this.handleEditStart,
      onKeyPress: this.handleKeyPress,
      className: _ArrayInputGridItem.default.previewWrapper
    }, /*#__PURE__*/_react.default.createElement("div", {
      tabIndex: -1,
      ref: this.setFocusArea,
      className: _ArrayInputGridItem.default.previewWrapperHelper,
      onFocus: this.handleFocus
    }, !value._key && /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.missingKeyMessage
    }, "Missing key"), /*#__PURE__*/_react.default.createElement(_Preview.default, {
      layout: "media",
      value: value,
      type: memberType
    })), !readOnly && /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.presenceContainer
    }, /*#__PURE__*/_react.default.createElement(_presence2.FieldPresence, {
      presence: hasItemFocus ? [] : presence,
      maxAvatars: 1
    }))), !readOnly && /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.footer
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.dragHandleContainer
    }, isSortable && /*#__PURE__*/_react.default.createElement(DragHandle, null)), /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.functions
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_status.default, {
      markers: scopedValidation,
      placement: "bottom",
      showSummary: !value._ref
    })), value._ref && /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_intent.default, {
      icon: _linkIcon.default,
      intent: "edit",
      params: {
        id: value._ref
      }
    })), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ConfirmButton.default, {
      kind: "simple",
      onConfirm: this.handleRemove,
      placement: "bottom",
      title: "Remove this item"
    })))))));
  }

  render() {
    var _this$props8 = this.props,
        value = _this$props8.value,
        focusPath = _this$props8.focusPath;
    var isExpanded = PathUtils.isExpanded(value, focusPath);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _ArrayInputGridItem.default.root
    }, this.renderItem(), isExpanded && this.renderEditItemForm(value));
  }

}

exports.ArrayInputGridItem = ArrayInputGridItem;

_defineProperty(ArrayInputGridItem, "defaultProps", {
  level: 0,
  markers: []
});