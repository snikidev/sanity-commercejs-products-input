import { Observable } from 'rxjs';
import { Image as BaseImage, ImageAsset, ImageSchemaType, Marker, ObjectField, Path, SanityDocument } from '@sanity/types';
import React from 'react';
import PropTypes from 'prop-types';
import { ResolvedUploader, Uploader, UploaderResolver, UploadOptions } from '../../sanity/uploads/typedefs';
import PatchEvent from '../../PatchEvent';
export declare type AssetFromSource = {
    kind: 'assetDocumentId' | 'file' | 'base64' | 'url';
    value: string | File;
    assetDocumentProps?: ImageAsset;
};
interface UploadState {
    progress: number;
}
interface Image extends Partial<BaseImage> {
    _upload?: UploadState;
}
export declare type Props = {
    value?: Image;
    compareValue?: Image;
    document?: Image;
    type: ImageSchemaType;
    level: number;
    onChange: (event: PatchEvent) => void;
    resolveUploader: UploaderResolver;
    materialize: (documentId: string) => Observable<SanityDocument>;
    onBlur: () => void;
    onFocus: (path: Path) => void;
    readOnly: boolean | null;
    focusPath: Path;
    markers: Marker[];
    presence: any;
};
declare type ImageInputState = {
    isUploading: boolean;
    uploadError: Error | null;
    isAdvancedEditOpen: boolean;
    selectedAssetSource?: any;
    hasFocus: boolean;
};
export default class ImageInput extends React.PureComponent<Props, ImageInputState> {
    static contextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
    };
    _focusArea: any;
    uploadSubscription: any;
    state: {
        isUploading: boolean;
        uploadError: any;
        isAdvancedEditOpen: boolean;
        selectedAssetSource: any;
        hasFocus: boolean;
    };
    assetSources: any;
    constructor(props: Props);
    focus(): void;
    setFocusArea: (el: any | null) => void;
    isImageToolEnabled(): boolean;
    getConstrainedImageSrc: (assetDocument: ImageAsset) => string;
    clearUploadStatus(): void;
    cancelUpload(): void;
    getUploadOptions: (file: File) => ResolvedUploader[];
    uploadFirstAccepted(fileList: FileList): void;
    uploadWith(uploader: Uploader, file: File, assetDocumentProps?: UploadOptions): void;
    handleRemoveButtonClick: () => void;
    handleFieldChange: (event: PatchEvent, field: ObjectField) => void;
    handleStartAdvancedEdit: () => void;
    handleStopAdvancedEdit: () => void;
    handleClearUploadError: () => void;
    handleSelectAssetFromSource: (assetFromSource: AssetFromSource) => void;
    handleFocus: (path: Path) => void;
    handleBlur: (event: any) => void;
    handleCancelUpload: () => void;
    handleSelectFile: (files: FileList) => void;
    handleUpload: ({ file, uploader }: {
        file: any;
        uploader: any;
    }) => void;
    handleSelectImageFromAssetSource: (source: any) => void;
    handleAssetSourceClosed: () => void;
    renderAdvancedEdit(fields: ObjectField[]): JSX.Element;
    renderMaterializedAsset: (assetDocument: ImageAsset) => JSX.Element;
    renderFields(fields: ObjectField[]): JSX.Element[];
    renderField(field: ObjectField): JSX.Element;
    renderUploadState(uploadState: UploadState): JSX.Element;
    renderDropDownMenuItem: (item: any) => JSX.Element;
    renderSelectImageButton(): JSX.Element;
    renderAssetSource(): JSX.Element;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=ImageInput.d.ts.map