"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ChangeIndicator = require("@sanity/base/lib/change-indicators/ChangeIndicator");

var _changeIndicators = require("@sanity/base/lib/change-indicators");

var _HotspotImage = _interopRequireDefault(require("@sanity/imagetool/HotspotImage"));

var _imagetool = _interopRequireDefault(require("@sanity/imagetool"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _assetSource = _interopRequireDefault(require("all:part:@sanity/form-builder/input/image/asset-source"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _presence = require("@sanity/base/presence");

var _dropdown = _interopRequireDefault(require("part:@sanity/components/buttons/dropdown"));

var _editIcon = _interopRequireDefault(require("part:@sanity/base/edit-icon"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _button = _interopRequireDefault(require("part:@sanity/components/fileinput/button"));

var _formBuilder = _interopRequireDefault(require("config:@sanity/form-builder"));

var _imageIcon = _interopRequireDefault(require("part:@sanity/base/image-icon"));

var _circle = _interopRequireDefault(require("part:@sanity/components/progress/circle"));

var _searchIcon = _interopRequireDefault(require("part:@sanity/base/search-icon"));

var _trashIcon = _interopRequireDefault(require("part:@sanity/base/trash-icon"));

var _uploadIcon = _interopRequireDefault(require("part:@sanity/base/upload-icon"));

var _assetSources = _interopRequireDefault(require("part:@sanity/form-builder/input/image/asset-sources?"));

var _visibilityIcon = _interopRequireDefault(require("part:@sanity/base/visibility-icon"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _FormBuilderInput = require("../../FormBuilderInput");

var _ImageToolInput = _interopRequireDefault(require("../ImageToolInput"));

var _PatchEvent = _interopRequireWildcard(require("../../PatchEvent"));

var _UploadPlaceholder = _interopRequireDefault(require("../common/UploadPlaceholder"));

var _UploadTargetFieldset = _interopRequireDefault(require("../../utils/UploadTargetFieldset"));

var _WithMaterializedReference = _interopRequireDefault(require("../../utils/WithMaterializedReference"));

var _image = require("./utils/image");

var _ImageInput = _interopRequireDefault(require("./ImageInput.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SUPPORT_DIRECT_UPLOADS = (0, _get2.default)(_formBuilder.default, 'images.directUploads');
var HIDDEN_FIELDS = ['asset', 'hotspot', 'crop'];

var getDevicePixelRatio = () => {
  if (typeof window === 'undefined' || !window.devicePixelRatio) {
    return 1;
  }

  return Math.round(Math.max(1, window.devicePixelRatio));
};

var globalAssetSources = _assetSources.default ? _assetSources.default : _assetSource.default;

class ImageInput extends _react.default.PureComponent {
  constructor(props) {
    super(props); // Allow overriding sources set directly on type.options

    _defineProperty(this, "_focusArea", void 0);

    _defineProperty(this, "uploadSubscription", void 0);

    _defineProperty(this, "state", {
      isUploading: false,
      uploadError: null,
      isAdvancedEditOpen: false,
      selectedAssetSource: null,
      hasFocus: false
    });

    _defineProperty(this, "assetSources", globalAssetSources);

    _defineProperty(this, "setFocusArea", el => {
      this._focusArea = el;
    });

    _defineProperty(this, "getConstrainedImageSrc", assetDocument => {
      var materializedSize = _imagetool.default.maxWidth || 1000;
      var maxSize = materializedSize * getDevicePixelRatio();
      var constrainedSrc = "".concat(assetDocument.url, "?w=").concat(maxSize, "&h=").concat(maxSize, "&fit=max");
      return constrainedSrc;
    });

    _defineProperty(this, "getUploadOptions", file => {
      var _this$props = this.props,
          type = _this$props.type,
          resolveUploader = _this$props.resolveUploader;
      var uploader = resolveUploader && resolveUploader(type, file);
      return uploader ? [{
        type: type,
        uploader
      }] : [];
    });

    _defineProperty(this, "handleRemoveButtonClick", () => {
      var getValuePath = this.context.getValuePath;
      var value = this.props.value;
      var parentPathSegment = getValuePath().slice(-1)[0]; // String path segment mean an object path, while a number or a
      // keyed segment means we're a direct child of an array

      var isArrayElement = typeof parentPathSegment !== 'string'; // When removing the image, we should also remove any crop and hotspot
      // _type and _key are "meta"-properties and are not significant unless
      // other properties are present. Thus, we want to remove the entire
      // "container" object if these are the only properties present, BUT
      // only if we're not an array element, as removing the array element
      // will close the selection dialog. Instead, when closing the dialog,
      // the array logic will check for an "empty" value and remove it for us

      var allKeys = Object.keys(value);
      var remainingKeys = allKeys.filter(key => !['_type', '_key', '_upload', 'asset', 'crop', 'hotspot'].includes(key));
      var isEmpty = remainingKeys.length === 0;
      var removeKeys = ['asset'].concat(allKeys.filter(key => ['crop', 'hotspot', '_upload'].includes(key))).map(key => (0, _PatchEvent.unset)([key]));
      this.props.onChange(_PatchEvent.default.from(isEmpty && !isArrayElement ? (0, _PatchEvent.unset)() : removeKeys));
    });

    _defineProperty(this, "handleFieldChange", (event, field) => {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          type = _this$props2.type;
      onChange(event.prefixAll(field.name).prepend((0, _PatchEvent.setIfMissing)({
        _type: type.name
      })));
    });

    _defineProperty(this, "handleStartAdvancedEdit", () => {
      this.setState({
        isAdvancedEditOpen: true
      });
    });

    _defineProperty(this, "handleStopAdvancedEdit", () => {
      this.setState({
        isAdvancedEditOpen: false
      });
    });

    _defineProperty(this, "handleClearUploadError", () => {
      this.setState({
        uploadError: null
      });
    });

    _defineProperty(this, "handleSelectAssetFromSource", assetFromSource => {
      var _this$props3 = this.props,
          onChange = _this$props3.onChange,
          type = _this$props3.type,
          resolveUploader = _this$props3.resolveUploader;

      if (!assetFromSource) {
        throw new Error('No asset given');
      }

      if (!Array.isArray(assetFromSource) || assetFromSource.length === 0) {
        throw new Error('Returned value must be an array with at least one item (asset)');
      }

      var firstAsset = assetFromSource[0];
      var originalFilename = (0, _get2.default)(firstAsset, 'assetDocumentProps.originalFilename');
      var label = (0, _get2.default)(firstAsset, 'assetDocumentProps.label');
      var title = (0, _get2.default)(firstAsset, 'assetDocumentProps.title');
      var description = (0, _get2.default)(firstAsset, 'assetDocumentProps.description');
      var creditLine = (0, _get2.default)(firstAsset, 'assetDocumentProps.creditLine');
      var source = (0, _get2.default)(firstAsset, 'assetDocumentProps.source');

      switch (firstAsset.kind) {
        case 'assetDocumentId':
          onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
            _type: type.name
          }), (0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop']), (0, _PatchEvent.set)({
            _type: 'reference',
            _ref: firstAsset.value
          }, ['asset'])]));
          break;

        case 'file':
          {
            var uploader = resolveUploader(type, firstAsset.value);
            this.uploadWith(uploader, firstAsset.value, {
              label,
              title,
              description,
              creditLine,
              source
            });
            break;
          }

        case 'base64':
          (0, _image.base64ToFile)(firstAsset.value, originalFilename).then(file => {
            var uploader = resolveUploader(type, file);
            this.uploadWith(uploader, file, {
              label,
              title,
              description,
              creditLine,
              source
            });
          });
          break;

        case 'url':
          (0, _image.urlToFile)(firstAsset.value, originalFilename).then(file => {
            var uploader = resolveUploader(type, file);
            this.uploadWith(uploader, file, {
              label,
              title,
              description,
              creditLine,
              source
            });
          });
          break;

        default:
          {
            throw new Error('Invalid value returned from asset source plugin');
          }
      }

      this.setState({
        selectedAssetSource: null
      });
    });

    _defineProperty(this, "handleFocus", path => {
      this.setState({
        hasFocus: true
      });
      this.props.onFocus(path);
    });

    _defineProperty(this, "handleBlur", event => {
      this.props.onBlur();
      this.setState({
        hasFocus: false
      });
    });

    _defineProperty(this, "handleCancelUpload", () => {
      this.cancelUpload();
    });

    _defineProperty(this, "handleSelectFile", files => {
      this.uploadFirstAccepted(files);
    });

    _defineProperty(this, "handleUpload", (_ref) => {
      var file = _ref.file,
          uploader = _ref.uploader;
      this.uploadWith(uploader, file);
    });

    _defineProperty(this, "handleSelectImageFromAssetSource", source => {
      this.setState({
        selectedAssetSource: source
      });
    });

    _defineProperty(this, "handleAssetSourceClosed", () => {
      this.setState({
        selectedAssetSource: null
      });
    });

    _defineProperty(this, "renderMaterializedAsset", assetDocument => {
      var _this$props$value = this.props.value,
          value = _this$props$value === void 0 ? {} : _this$props$value;
      var constrainedSrc = this.getConstrainedImageSrc(assetDocument);
      var srcAspectRatio = (0, _get2.default)(assetDocument, 'metadata.dimensions.aspectRatio');
      return typeof srcAspectRatio === 'undefined' ? null : /*#__PURE__*/_react.default.createElement(_HotspotImage.default, {
        aspectRatio: "auto",
        src: constrainedSrc,
        srcAspectRatio: srcAspectRatio,
        hotspot: value.hotspot,
        crop: value.crop
      });
    });

    _defineProperty(this, "renderDropDownMenuItem", item => {
      if (!item) {
        return null;
      }

      return /*#__PURE__*/_react.default.createElement("div", {
        className: _ImageInput.default.selectDropDownAssetSourceItem
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _ImageInput.default.selectDropDownAssetSourceItem__inner
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: _ImageInput.default.selectDropDownAssetSourceItem__iconContainer
      }, /*#__PURE__*/(0, _react.createElement)(item.icon || _imageIcon.default)), /*#__PURE__*/_react.default.createElement("div", {
        className: _ImageInput.default.selectDropDownAssetSourceItem__label
      }, item.title)));
    });

    var sourcesFromType = (0, _get2.default)(props.type, 'options.sources');

    if (Array.isArray(sourcesFromType) && sourcesFromType.length > 0) {
      this.assetSources = sourcesFromType;
    } else if (sourcesFromType) {
      this.assetSources = null;
    }
  }

  focus() {
    if (this._focusArea) {
      this._focusArea.focus();
    }
  }

  isImageToolEnabled() {
    return (0, _get2.default)(this.props.type, 'options.hotspot') === true;
  }

  clearUploadStatus() {
    this.props.onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['_upload'])])); // todo: this is kind of hackish
  }

  cancelUpload() {
    if (this.uploadSubscription) {
      this.uploadSubscription.unsubscribe();
      this.clearUploadStatus();
    }
  }

  uploadFirstAccepted(fileList) {
    var _this$props4 = this.props,
        resolveUploader = _this$props4.resolveUploader,
        type = _this$props4.type;
    var match;
    Array.from(fileList).some(file => {
      var uploader = resolveUploader(type, file);

      if (uploader) {
        match = {
          file,
          uploader
        };
        return true;
      }

      return false;
    });

    if (match) {
      this.uploadWith(match.uploader, match.file);
    }
  }

  uploadWith(uploader, file) {
    var assetDocumentProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _this$props5 = this.props,
        type = _this$props5.type,
        onChange = _this$props5.onChange;
    var label = assetDocumentProps.label,
        title = assetDocumentProps.title,
        description = assetDocumentProps.description,
        creditLine = assetDocumentProps.creditLine,
        source = assetDocumentProps.source;
    var options = {
      metadata: (0, _get2.default)(type, 'options.metadata'),
      storeOriginalFilename: (0, _get2.default)(type, 'options.storeOriginalFilename'),
      label,
      title,
      description,
      creditLine,
      source
    };
    this.cancelUpload();
    this.setState({
      isUploading: true
    });
    onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
      _type: type.name
    })]));
    this.uploadSubscription = uploader.upload(file, type, options).subscribe({
      next: uploadEvent => {
        if (uploadEvent.patches) {
          onChange(_PatchEvent.default.from(uploadEvent.patches));
        }
      },
      error: err => {
        // eslint-disable-next-line no-console
        console.error(err);
        this.setState({
          uploadError: err
        });
        this.clearUploadStatus();
      },
      complete: () => {
        onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop'])]));
        this.setState({
          isUploading: false
        });
      }
    });
  }

  // handleDialogAction = action => {
  //   if (action.name === 'done') {
  //     this.handleStopAdvancedEdit()
  //   }
  // }
  renderAdvancedEdit(fields) {
    var _this$props6 = this.props,
        value = _this$props6.value,
        level = _this$props6.level,
        type = _this$props6.type,
        onChange = _this$props6.onChange,
        readOnly = _this$props6.readOnly,
        materialize = _this$props6.materialize;
    var withImageTool = this.isImageToolEnabled() && value && value.asset;
    return /*#__PURE__*/_react.default.createElement(_default2.default // actions={[
    //   {
    //     name: 'done',
    //     title: 'Done',
    //     inverted: true
    //   }
    // ]}
    , {
      isOpen: true,
      title: "Edit details" // onAction={this.handleDialogAction}
      ,
      onClose: this.handleStopAdvancedEdit
    }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, null, /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.fieldWrapper
    }, withImageTool && /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
      materialize: materialize,
      reference: value.asset
    }, imageAsset => /*#__PURE__*/_react.default.createElement(_ImageToolInput.default, {
      type: type,
      level: level,
      readOnly: readOnly,
      imageUrl: this.getConstrainedImageSrc(imageAsset),
      value: value,
      onChange: onChange
    })), this.renderFields(fields))));
  }

  renderFields(fields) {
    return fields.map(field => this.renderField(field));
  }

  renderField(field) {
    var _this$props7 = this.props,
        value = _this$props7.value,
        level = _this$props7.level,
        focusPath = _this$props7.focusPath,
        onFocus = _this$props7.onFocus,
        readOnly = _this$props7.readOnly,
        onBlur = _this$props7.onBlur,
        presence = _this$props7.presence;
    var fieldValue = value && value[field.name];
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.field,
      key: field.name
    }, /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, {
      value: fieldValue,
      type: field.type,
      onChange: ev => this.handleFieldChange(ev, field),
      path: [field.name],
      onFocus: onFocus,
      onBlur: onBlur,
      readOnly: readOnly || field.type.readOnly,
      focusPath: focusPath,
      level: level,
      presence: presence
    }));
  }

  renderUploadState(uploadState) {
    var isUploading = this.state.isUploading;
    var isComplete = uploadState.progress === 100 && !!(this.props.value && this.props.value.asset);
    return /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.progress
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_circle.default, {
      percent: status === 'complete' ? 100 : uploadState.progress,
      text: isComplete ? 'Please wait…' : 'Uploading…',
      completed: isComplete,
      showPercent: true,
      animation: true
    })), isUploading && /*#__PURE__*/_react.default.createElement(_default.default, {
      kind: "simple",
      color: "danger",
      onClick: this.handleCancelUpload
    }, "Cancel")));
  }

  renderSelectImageButton() {
    // If there are multiple asset sources render a dropdown
    if (this.assetSources.length > 1) {
      return /*#__PURE__*/_react.default.createElement(_dropdown.default, {
        items: this.assetSources,
        renderItem: this.renderDropDownMenuItem,
        onAction: this.handleSelectImageFromAssetSource,
        inverted: true,
        showArrow: true
      }, "Select");
    } // Single asset source (just a normal button)


    return /*#__PURE__*/_react.default.createElement(_default.default, {
      icon: _searchIcon.default,
      onClick: this.handleSelectImageFromAssetSource.bind(this, this.assetSources[0]),
      inverted: true
    }, "Select");
  }

  renderAssetSource() {
    var selectedAssetSource = this.state.selectedAssetSource;
    var _this$props8 = this.props,
        value = _this$props8.value,
        materialize = _this$props8.materialize,
        document = _this$props8.document;

    if (!selectedAssetSource) {
      return null;
    }

    var Component = selectedAssetSource.component;

    if (value && value.asset) {
      return /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
        materialize: materialize,
        reference: value.asset
      }, imageAsset => {
        return /*#__PURE__*/_react.default.createElement(Component, {
          document: document,
          selectedAssets: [imageAsset],
          selectionType: "single",
          onClose: this.handleAssetSourceClosed,
          onSelect: this.handleSelectAssetFromSource
        });
      });
    }

    return /*#__PURE__*/_react.default.createElement(Component, {
      document: document,
      selectedAssets: [],
      selectionType: "single",
      onClose: this.handleAssetSourceClosed,
      onSelect: this.handleSelectAssetFromSource
    });
  } // eslint-disable-next-line complexity


  render() {
    var _value$asset, _compareValue$asset;

    var _this$props9 = this.props,
        type = _this$props9.type,
        value = _this$props9.value,
        compareValue = _this$props9.compareValue,
        level = _this$props9.level,
        materialize = _this$props9.materialize,
        markers = _this$props9.markers,
        readOnly = _this$props9.readOnly,
        presence = _this$props9.presence;
    var _this$state = this.state,
        isAdvancedEditOpen = _this$state.isAdvancedEditOpen,
        selectedAssetSource = _this$state.selectedAssetSource,
        uploadError = _this$state.uploadError,
        hasFocus = _this$state.hasFocus;

    var _partition2 = (0, _partition4.default)(type.fields.filter(field => !HIDDEN_FIELDS.includes(field.name)), 'type.options.isHighlighted'),
        _partition3 = _slicedToArray(_partition2, 2),
        highlightedFields = _partition3[0],
        otherFields = _partition3[1];

    var accept = (0, _get2.default)(type, 'options.accept', 'image/*');
    var hasAsset = value && value.asset;
    var showAdvancedEditButton = value && (otherFields.length > 0 || hasAsset && this.isImageToolEnabled());
    var FieldSetComponent = SUPPORT_DIRECT_UPLOADS ? _UploadTargetFieldset.default : _default3.default;
    var uploadProps = SUPPORT_DIRECT_UPLOADS ? {
      getUploadOptions: this.getUploadOptions,
      onUpload: this.handleUpload
    } : {};
    var isInside = presence.map(item => {
      var otherFieldsPath = otherFields.map(field => field.name);
      return item.path.some(path => otherFieldsPath.includes(path)) ? item.identity : null;
    }).filter(String);
    return /*#__PURE__*/_react.default.createElement(FieldSetComponent, _extends({
      markers: markers,
      presence: presence.filter(item => item.path[0] === '$' || isInside.includes(item.identity)),
      legend: type.title,
      description: type.description,
      level: level,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      ref: this.setFocusArea,
      changeIndicator: false
    }, uploadProps), /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(_ImageInput.default.root, readOnly && _ImageInput.default.readOnly, hasFocus && _ImageInput.default.focused)
    }, uploadError && /*#__PURE__*/_react.default.createElement(_default4.default, {
      kind: "error",
      isPersisted: true,
      actionTitle: "OK",
      onAction: this.handleClearUploadError,
      title: "Upload error",
      subtitle: /*#__PURE__*/_react.default.createElement("div", null, "We're really sorry, but the upload could not be completed.")
    }), /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicatorCompareValueProvider, {
      value: value === null || value === void 0 ? void 0 : (_value$asset = value.asset) === null || _value$asset === void 0 ? void 0 : _value$asset._ref,
      compareValue: compareValue === null || compareValue === void 0 ? void 0 : (_compareValue$asset = compareValue.asset) === null || _compareValue$asset === void 0 ? void 0 : _compareValue$asset._ref
    }, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicator, null, /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.content
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.assetWrapper
    }, value && value._upload && /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.uploadState
    }, this.renderUploadState(value._upload)), hasAsset ? /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
      reference: value.asset,
      materialize: materialize
    }, this.renderMaterializedAsset) : readOnly ? /*#__PURE__*/_react.default.createElement("span", null, "Field is read only") : SUPPORT_DIRECT_UPLOADS && /*#__PURE__*/_react.default.createElement(_UploadPlaceholder.default, {
      hasFocus: hasFocus,
      fileType: "image"
    }))))), /*#__PURE__*/_react.default.createElement("div", {
      className: _ImageInput.default.functions
    }, /*#__PURE__*/_react.default.createElement(_buttonGrid.default, null, !readOnly && SUPPORT_DIRECT_UPLOADS && /*#__PURE__*/_react.default.createElement(_button.default, {
      icon: _uploadIcon.default,
      inverted: true,
      onSelect: this.handleSelectFile,
      accept: accept
    }, "Upload"), !readOnly && this.renderSelectImageButton(), showAdvancedEditButton && /*#__PURE__*/_react.default.createElement(_default.default, {
      icon: readOnly ? _visibilityIcon.default : _editIcon.default,
      inverted: true,
      title: readOnly ? 'View details' : 'Edit details',
      onClick: this.handleStartAdvancedEdit
    }, readOnly ? 'View details' : 'Edit'), hasAsset && !readOnly && /*#__PURE__*/_react.default.createElement(_default.default, {
      color: "danger",
      icon: _trashIcon.default,
      inverted: true,
      onClick: this.handleRemoveButtonClick
    }, "Remove")))), highlightedFields.length > 0 && this.renderFields(highlightedFields), isAdvancedEditOpen && this.renderAdvancedEdit(otherFields), selectedAssetSource && this.renderAssetSource());
  }

}

exports.default = ImageInput;

_defineProperty(ImageInput, "contextTypes", {
  getValuePath: _propTypes.default.func
});