"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _AssetDialog = _interopRequireDefault(require("./AssetDialog"));

var _AssetMenu = _interopRequireDefault(require("./AssetMenu"));

var _Asset = _interopRequireDefault(require("./Asset.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Get pixel density of the current device
var DPI = typeof window === 'undefined' || !window.devicePixelRatio ? 1 : Math.round(window.devicePixelRatio);

class Asset extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      isDeleting: false,
      dialogType: null
    });

    _defineProperty(this, "handleDeleteAsset", asset => {
      var onDeleteFinished = this.props.onDeleteFinished;
      this.setState({
        isDeleting: true
      });
      return _client.default.delete(asset._id).then(() => {
        this.setState({
          isDeleting: false
        });
        onDeleteFinished(asset._id);
      }).catch(err => {
        this.setState({
          isDeleting: false,
          dialogType: 'error'
        }); // eslint-disable-next-line no-console

        console.error('Could not delete asset', err);
      });
    });

    _defineProperty(this, "handleDialogClose", () => {
      this.setState({
        dialogType: null
      });
    });

    _defineProperty(this, "handleMenuAction", action => {
      if (action.name === 'delete') {
        this.handleDeleteAsset(this.props.asset);
      }

      if (action.name === 'showRefs') {
        this.setState({
          dialogType: 'showRefs'
        });
      }
    });

    _defineProperty(this, "handleDialogAction", action => {
      if (action.name === 'close') {
        this.handleDialogClose();
      }

      if (action.name === 'delete') {
        this.handleDeleteAsset(this.props.asset);
      }
    });
  }

  render() {
    var _this$props = this.props,
        asset = _this$props.asset,
        onClick = _this$props.onClick,
        onKeyPress = _this$props.onKeyPress,
        isSelected = _this$props.isSelected;
    var _this$state = this.state,
        isDeleting = _this$state.isDeleting,
        dialogType = _this$state.dialogType;
    var imgH = 200 * Math.max(1, DPI);
    return /*#__PURE__*/_react.default.createElement("a", {
      className: (0, _classnames.default)(_Asset.default.root, isSelected && _Asset.default.selected),
      tabIndex: 0,
      "data-id": asset._id,
      onKeyPress: onKeyPress
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _Asset.default.imageContainer
    }, /*#__PURE__*/_react.default.createElement("img", {
      src: "".concat(asset.url, "?h=").concat(imgH, "&fit=max"),
      className: _Asset.default.image,
      onClick: onClick,
      "data-id": asset._id
    }), isDeleting && /*#__PURE__*/_react.default.createElement("div", {
      className: _Asset.default.spinnerContainer
    }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
      center: true
    }))), /*#__PURE__*/_react.default.createElement("div", {
      className: _Asset.default.menuContainer
    }, /*#__PURE__*/_react.default.createElement(_AssetMenu.default, {
      isSelected: isSelected,
      onAction: this.handleMenuAction
    }), dialogType && /*#__PURE__*/_react.default.createElement(_AssetDialog.default, {
      asset: asset,
      dialogType: dialogType,
      onAction: this.handleDialogAction,
      onClose: this.handleDialogClose
    })));
  }

}

exports.default = Asset;