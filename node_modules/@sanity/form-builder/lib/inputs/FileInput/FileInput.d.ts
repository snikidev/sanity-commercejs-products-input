import React from 'react';
import PropTypes from 'prop-types';
import { Observable, Subscription } from 'rxjs';
import { Marker, Path, File as BaseFile, FileAsset, SchemaType, FileSchemaType } from '@sanity/types';
import { ResolvedUploader, Uploader, UploaderResolver } from '../../sanity/uploads/typedefs';
import PatchEvent from '../../PatchEvent';
declare type FieldT = {
    name: string;
    type: SchemaType;
};
interface UploadState {
    progress: number;
}
interface File extends Partial<BaseFile> {
    _upload?: UploadState;
}
export declare type Props = {
    value?: File;
    compareValue?: File;
    type: FileSchemaType;
    level: number;
    onChange: (event: PatchEvent) => void;
    resolveUploader: UploaderResolver;
    materialize: (documentId: string) => Observable<FileAsset>;
    onBlur: () => void;
    onFocus: (path: Path) => void;
    readOnly: boolean | null;
    focusPath: Path;
    markers: Marker[];
    presence: any;
};
declare type FileInputState = {
    isUploading: boolean;
    uploadError: Error | null;
    isAdvancedEditOpen: boolean;
    hasFocus: boolean;
};
export default class FileInput extends React.PureComponent<Props, FileInputState> {
    static contextTypes: {
        getValuePath: PropTypes.Requireable<(...args: any[]) => any>;
    };
    _focusArea: any;
    uploadSubscription: Subscription;
    state: FileInputState;
    handleRemoveButtonClick: () => void;
    clearUploadStatus(): void;
    cancelUpload(): void;
    handleCancelUpload: () => void;
    handleSelectFile: (files: FileList) => void;
    uploadFirstAccepted(fileList: FileList): void;
    uploadWith(uploader: Uploader, file: globalThis.File): void;
    renderMaterializedAsset: (assetDocument: FileAsset) => JSX.Element;
    renderUploadState(uploadState: UploadState): JSX.Element;
    handleFieldChange: (event: PatchEvent, field: FieldT) => void;
    handleStartAdvancedEdit: () => void;
    handleStopAdvancedEdit: () => void;
    handleClearUploadError: () => void;
    renderAdvancedEdit(fields: Array<FieldT>): JSX.Element;
    renderSelectFileButton(): JSX.Element;
    renderFields(fields: Array<FieldT>): JSX.Element[];
    handleFocus: (event: any) => void;
    handleBlur: () => void;
    renderField(field: FieldT): JSX.Element;
    renderAsset(): JSX.Element;
    focus(): void;
    setFocusArea: (el: any | null) => void;
    getUploadOptions: (file: globalThis.File) => Array<ResolvedUploader>;
    handleUpload: ({ file, uploader }: {
        file: any;
        uploader: any;
    }) => void;
    render(): JSX.Element;
}
export {};
//# sourceMappingURL=FileInput.d.ts.map