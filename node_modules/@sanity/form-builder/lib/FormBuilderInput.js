"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormBuilderInput = void 0;

var _react = _interopRequireDefault(require("react"));

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _changeIndicators = require("@sanity/base/lib/change-indicators");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _generateHelpUrl = _interopRequireDefault(require("@sanity/generate-help-url"));

var _presence = require("@sanity/base/presence");

var _empty = require("./utils/empty");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var EMPTY_PROPS = (0, _empty.emptyObject)();
var EMPTY_MARKERS = (0, _empty.emptyArray)();
var EMPTY_PATH = (0, _empty.emptyArray)();
var EMPTY_PRESENCE = (0, _empty.emptyArray)();

// eslint-disable-next-line @typescript-eslint/no-empty-function
var ENABLE_CONTEXT = () => {};

function getDisplayName(component) {
  return component.displayName || component.name || 'Unknown';
}

class FormBuilderInput extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "scrollTimeout", void 0);

    _defineProperty(this, "_element", void 0);

    _defineProperty(this, "_input", void 0);

    _defineProperty(this, "getValuePath", () => {
      return this.context.getValuePath().concat(this.props.path);
    });

    _defineProperty(this, "setInput", component => {
      this._input = component;
    });

    _defineProperty(this, "handleChange", patchEvent => {
      var _this$props = this.props,
          type = _this$props.type,
          onChange = _this$props.onChange;

      if (type.readOnly) {
        return;
      }

      onChange(patchEvent);
    });

    _defineProperty(this, "handleFocus", nextPath => {
      var _this$props2 = this.props,
          path = _this$props2.path,
          onFocus = _this$props2.onFocus,
          focusPath = _this$props2.focusPath;

      if (!onFocus) {
        // eslint-disable-next-line no-console
        console.warn('FormBuilderInput was used without passing a required onFocus prop. Read more at %s.', (0, _generateHelpUrl.default)('form-builder-input-missing-required-prop'));
        return;
      }

      var nextFocusPath = Array.isArray(nextPath) ? [...path, ...nextPath] : path;

      if (PathUtils.isEqual(focusPath, nextFocusPath)) {
        // no change
        return;
      }

      onFocus(nextFocusPath);
    });

    _defineProperty(this, "handleBlur", () => {
      var onBlur = this.props.onBlur;

      if (!onBlur) {
        // eslint-disable-next-line no-console
        console.warn('FormBuilderInput was used without passing a required onBlur prop. Read more at %s.', (0, _generateHelpUrl.default)('form-builder-input-missing-required-prop'));
        return;
      }

      onBlur();
    });
  }

  getChildContext() {
    return {
      getValuePath: this.getValuePath
    };
  }

  componentDidMount() {
    var _this$props3 = this.props,
        focusPath = _this$props3.focusPath,
        path = _this$props3.path;

    if (PathUtils.hasFocus(focusPath, path)) {
      this.focus();
    }
  }

  shouldComponentUpdate(nextProps) {
    var _this$props4 = this.props,
        oldPath = _this$props4.path,
        oldProps = _objectWithoutProperties(_this$props4, ["path"]);

    var newPath = nextProps.path,
        newProps = _objectWithoutProperties(nextProps, ["path"]);

    var propsDiffer = !(0, _shallowEquals.default)(oldProps, newProps);
    var pathDiffer = !PathUtils.isEqual(oldPath, newPath);
    return propsDiffer || pathDiffer;
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    var willHaveFocus = PathUtils.hasFocus(nextProps.focusPath, nextProps.path);
    var hasFocus = PathUtils.hasFocus(this.props.focusPath, this.props.path);

    if (willHaveFocus && !hasFocus) {
      this.focus();
    }
  }

  componentWillUnmount() {
    if (this.scrollTimeout) {
      clearTimeout(this.scrollTimeout);
    }
  }

  resolveInputComponent(type) {
    return this.context.formBuilder.resolveInputComponent(type);
  }

  focus() {
    var type = this.props.type;

    if (this._input && typeof this._input.focus === 'function') {
      this._input.focus();

      return;
    }

    var inputComponent = this.resolveInputComponent(type);
    var inputDisplayName = getDisplayName(inputComponent); // no ref

    if (!this._input) {
      // eslint-disable-next-line no-console
      console.warn('The input component for type "%s" has no associated ref element. Please check the implementation of "%s" [%O]. If this is a function component, it must be wrapped in React.forwardRef(). Read more at %s', type.name, inputDisplayName, inputComponent, (0, _generateHelpUrl.default)('input-component-no-ref'));
      return;
    } // eslint-disable-next-line no-console


    console.warn('The input component for type "%s" is missing a required ".focus()" method. Please check the implementation of "%s" [%O]. Read more at %s', type.name, inputDisplayName, inputComponent, (0, _generateHelpUrl.default)('input-component-missing-required-method'));
  }

  getChildFocusPath() {
    var _this$props5 = this.props,
        path = _this$props5.path,
        focusPath = _this$props5.focusPath;
    return PathUtils.trimChildPath(path, focusPath);
  }

  render() {
    var _this$props6 = this.props,
        onChange = _this$props6.onChange,
        onFocus = _this$props6.onFocus,
        onBlur = _this$props6.onBlur,
        path = _this$props6.path,
        readOnly = _this$props6.readOnly,
        value = _this$props6.value,
        markers = _this$props6.markers,
        type = _this$props6.type,
        level = _this$props6.level,
        focusPath = _this$props6.focusPath,
        compareValue = _this$props6.compareValue,
        isRoot = _this$props6.isRoot,
        explicitPresence = _this$props6.presence,
        rest = _objectWithoutProperties(_this$props6, ["onChange", "onFocus", "onBlur", "path", "readOnly", "value", "markers", "type", "level", "focusPath", "compareValue", "isRoot", "presence"]);

    var presence = explicitPresence || this.context.presence;
    var InputComponent = this.resolveInputComponent(type);

    if (!InputComponent) {
      return /*#__PURE__*/_react.default.createElement("div", {
        tabIndex: 0,
        ref: this.setInput
      }, "No input resolved for type ", type.name ? JSON.stringify(type.name) : '<unknown type>');
    }

    var childMarkers = markers;

    if (!isRoot) {
      childMarkers = markers.filter(marker => PathUtils.startsWith(path, marker.path)).map(marker => _objectSpread(_objectSpread({}, marker), {}, {
        path: PathUtils.trimChildPath(path, marker.path)
      }));
    }

    var childFocusPath = this.getChildFocusPath();
    var isLeaf = childFocusPath.length === 0 || childFocusPath[0] === PathUtils.FOCUS_TERMINATOR;
    var leafProps = isLeaf ? EMPTY_PROPS : {
      focusPath: childFocusPath
    };
    var childPresenceInfo = readOnly || !presence || presence.length === 0 ? EMPTY_PRESENCE : presence.filter(item => PathUtils.startsWith(path, item.path)).map(item => _objectSpread(_objectSpread({}, item), {}, {
      path: PathUtils.trimChildPath(path, item.path)
    }));
    var childCompareValue = PathUtils.get(compareValue, path);
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-focus-path": PathUtils.toString(path)
    }, /*#__PURE__*/_react.default.createElement(_presence.FormFieldPresenceContext.Provider, {
      value: childPresenceInfo
    }, /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorProvider, {
      path: path,
      focusPath: focusPath,
      value: value,
      compareValue: childCompareValue
    }, /*#__PURE__*/_react.default.createElement(InputComponent, _extends({}, rest, leafProps, {
      isRoot: isRoot,
      value: value,
      compareValue: childCompareValue,
      readOnly: readOnly || type.readOnly,
      markers: childMarkers.length === 0 ? EMPTY_MARKERS : childMarkers,
      type: type,
      presence: childPresenceInfo,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      level: level,
      ref: this.setInput
    })))));
  }

}

exports.FormBuilderInput = FormBuilderInput;

_defineProperty(FormBuilderInput, "contextTypes", {
  presence: ENABLE_CONTEXT,
  formBuilder: ENABLE_CONTEXT,
  getValuePath: ENABLE_CONTEXT
});

_defineProperty(FormBuilderInput, "childContextTypes", {
  getValuePath: ENABLE_CONTEXT
});

_defineProperty(FormBuilderInput, "defaultProps", {
  focusPath: EMPTY_PATH,
  path: EMPTY_PATH,
  markers: EMPTY_MARKERS
});