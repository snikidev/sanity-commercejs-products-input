"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentPanel = DocumentPanel;

var _classnames = _interopRequireDefault(require("classnames"));

var _portal = require("part:@sanity/components/portal");

var _scroll = require("part:@sanity/components/scroll");

var _react = _interopRequireWildcard(require("react"));

var _features = require("../../../features");

var _documentHistory = require("../documentHistory");

var _title = require("./header/title");

var _header = require("./header/header");

var _menuItems = require("./menuItems");

var _views = require("./views");

var _documentPanel = _interopRequireDefault(require("./documentPanel.css"));

var _constants = require("./constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function DocumentPanel(props) {
  var toggleInspect = props.toggleInspect,
      isHistoryOpen = props.isHistoryOpen,
      views = props.views,
      activeViewId = props.activeViewId;
  var parentPortal = (0, _portal.usePortal)();
  var features = (0, _features.useDeskToolFeatures)();
  var portalRef = (0, _react.useRef)(null);

  var _useDocumentHistory = (0, _documentHistory.useDocumentHistory)(),
      displayed = _useDocumentHistory.displayed,
      historyController = _useDocumentHistory.historyController,
      openHistory = _useDocumentHistory.open;

  var activeView = views.find(view => view.id === activeViewId) || views[0] || {
    type: 'form'
  };
  var revTime = historyController.revTime;
  var menuItems = (0, _react.useMemo)(() => {
    return (0, _menuItems.getMenuItems)({
      features,
      isHistoryOpen: props.isHistoryOpen,
      rev: revTime ? revTime.id : null,
      value: props.value
    }) || [];
  }, [features, props.isHistoryOpen, revTime, props.value]);
  var handleContextMenuAction = (0, _react.useCallback)(item => {
    if (item.action === 'production-preview') {
      window.open(item.url);
      return true;
    }

    if (item.action === 'inspect') {
      toggleInspect(true);
      return true;
    }

    if (item.action === 'reviewChanges') {
      openHistory();
      return true;
    }

    return false;
  }, [openHistory, toggleInspect]); // Use a local portal container when split panes is supported

  var portalElement = features.splitPanes ? portalRef.current || parentPortal.element : parentPortal.element; // Calculate the height of the header

  var hasTabs = views.length > 1;
  var narrowScreenMargins = hasTabs ? _constants.MARGINS_NARROW_SCREEN_WITH_TABS : _constants.MARGINS_NARROW_SCREEN_WITHOUT_TABS;
  var screenIsNarrow = !features.splitPanes;
  var margins = screenIsNarrow ? narrowScreenMargins : _constants.DEFAULT_MARGINS;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_documentPanel.default.root, props.isCollapsed && _documentPanel.default.isCollapsed)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentPanel.default.headerContainer
  }, /*#__PURE__*/_react.default.createElement(_header.DocumentPanelHeader, {
    activeViewId: props.activeViewId,
    idPrefix: props.idPrefix,
    isClosable: props.isClosable,
    isCollapsed: props.isCollapsed,
    isTimelineOpen: props.isTimelineOpen,
    markers: props.markers,
    menuItemGroups: props.menuItemGroups,
    menuItems: menuItems,
    onCloseView: props.onCloseView,
    onCollapse: props.onCollapse,
    onContextMenuAction: handleContextMenuAction,
    onExpand: props.onExpand,
    onSetActiveView: props.onSetActiveView,
    onSplitPane: props.onSplitPane,
    onTimelineOpen: props.onTimelineOpen,
    rootElement: props.rootElement,
    schemaType: props.schemaType,
    onSetFormInputFocus: props.onFormInputFocus,
    timelineMode: props.timelineMode,
    title: /*#__PURE__*/_react.default.createElement(_title.DocumentHeaderTitle, {
      documentType: props.documentType,
      paneTitle: props.paneTitle,
      value: props.value
    }),
    versionSelectRef: props.versionSelectRef,
    views: props.views,
    rev: revTime,
    isHistoryOpen: isHistoryOpen
  })), /*#__PURE__*/_react.default.createElement(_portal.PortalProvider, {
    element: portalElement
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentPanel.default.documentViewerContainer
  }, /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, {
    className: _documentPanel.default.documentScroller
  }, activeView.type === 'form' && /*#__PURE__*/_react.default.createElement(_views.FormView, {
    id: props.documentId,
    initialValue: props.initialValue,
    focusPath: props.formInputFocusPath,
    onFocus: props.onFormInputFocus,
    markers: props.markers,
    onChange: props.onChange,
    readOnly: revTime !== null,
    schemaType: props.schemaType,
    value: displayed,
    margins: margins,
    compareValue: props.compareValue
  }), activeView.type === 'component' && /*#__PURE__*/(0, _react.createElement)(activeView.component, {
    document: {
      draft: props.draft,
      displayed: displayed || props.value || props.initialValue,
      historical: displayed,
      published: props.published
    },
    documentId: props.documentId,
    options: activeView.options,
    schemaType: props.schemaType
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _documentPanel.default.portalContainer
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _documentPanel.default.portal,
    ref: portalRef
  })))));
}