"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMenuItems = exports.getProductionPreviewItem = void 0;

var _binaryIcon = _interopRequireDefault(require("part:@sanity/base/binary-icon"));

var _publicIcon = _interopRequireDefault(require("part:@sanity/base/public-icon"));

var _historyIcon = _interopRequireDefault(require("part:@sanity/base/history-icon"));

var _hotkeys = _interopRequireDefault(require("part:@sanity/components/typography/hotkeys"));

var _resolveProductionUrl = _interopRequireDefault(require("part:@sanity/transitional/production-preview/resolve-production-url?"));

var _react = _interopRequireDefault(require("react"));

var _menuItems = _interopRequireDefault(require("./menuItems.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getHistoryMenuItem = params => {
  var features = params.features,
      value = params.value,
      isHistoryOpen = params.isHistoryOpen;
  if (!features.reviewChanges) return null;
  return {
    action: 'reviewChanges',
    title: 'Review changes',
    icon: _historyIcon.default,
    isDisabled: isHistoryOpen || !value
  };
};

var getInspectItem = (_ref) => {
  var value = _ref.value;
  return {
    action: 'inspect',
    title: /*#__PURE__*/_react.default.createElement("span", {
      className: _menuItems.default.menuItem
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: _menuItems.default.menuItemLabel
    }, "Inspect"), /*#__PURE__*/_react.default.createElement("span", {
      className: _menuItems.default.hotkey
    }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'I'],
      size: "small"
    }))),
    icon: _binaryIcon.default,
    isDisabled: !value
  };
};

var getProductionPreviewItem = (_ref2) => {
  var value = _ref2.value,
      rev = _ref2.rev;

  if (!value || !_resolveProductionUrl.default) {
    return null;
  }

  var previewUrl;

  try {
    previewUrl = (0, _resolveProductionUrl.default)(value, rev);
  } catch (error) {
    error.message = "An error was thrown while trying to get production preview url: ".concat(error.message); // eslint-disable-next-line no-console

    console.error(error);
    return null;
  }

  if (!previewUrl) {
    return null;
  }

  return {
    action: 'production-preview',
    title: /*#__PURE__*/_react.default.createElement("span", {
      className: _menuItems.default.menuItem
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: _menuItems.default.menuItemLabel
    }, "Open preview"), /*#__PURE__*/_react.default.createElement("span", {
      className: _menuItems.default.hotkey
    }, /*#__PURE__*/_react.default.createElement(_hotkeys.default, {
      keys: ['Ctrl', 'Alt', 'O'],
      size: "small"
    }))),
    icon: _publicIcon.default,
    url: previewUrl
  };
};

exports.getProductionPreviewItem = getProductionPreviewItem;

var getMenuItems = params => {
  var items = [getProductionPreviewItem, getHistoryMenuItem, getInspectItem].filter(Boolean).map(fn => fn(params));
  return items.filter(i => i !== null);
};

exports.getMenuItems = getMenuItems;