"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocumentHistoryProvider = DocumentHistoryProvider;

var _reactHooks = require("@sanity/react-hooks");

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _react = _interopRequireWildcard(require("react"));

var _PaneRouterContext = require("../../../contexts/PaneRouterContext");

var _context = require("./context");

var _controller = require("./history/controller");

var _timeline = require("./history/timeline");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function DocumentHistoryProvider(props) {
  var children = props.children,
      documentId = props.documentId,
      value = props.value;
  var paneRouter = (0, _PaneRouterContext.usePaneRouter)();

  var _useState = (0, _react.useState)('closed'),
      _useState2 = _slicedToArray(_useState, 2),
      timelineMode = _useState2[0],
      setTimelineMode = _useState2[1];

  var timeline = (0, _react.useMemo)(() => new _timeline.Timeline({
    publishedId: documentId,
    enableTrace: __DEV__
  }), [documentId]); // note: this emits sync so can never be null
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  var _ref = (0, _reactHooks.useObservable)((0, _react.useMemo)(() => (0, _controller.createObservableController)({
    timeline,
    documentId,
    client: _client.default
  }), [documentId, timeline])),
      historyController = _ref.historyController;

  var _ref2 = paneRouter.params,
      since = _ref2.since,
      rev = _ref2.rev;
  historyController.setRange(since || null, rev || null);
  var close = (0, _react.useCallback)(() => {
    paneRouter.setParams(_objectSpread(_objectSpread({}, paneRouter.params), {}, {
      since: undefined
    }));
  }, [paneRouter]);
  var open = (0, _react.useCallback)(() => {
    paneRouter.setParams(_objectSpread(_objectSpread({}, paneRouter.params), {}, {
      since: '@lastPublished'
    }));
  }, [paneRouter]);
  var setRange = (0, _react.useCallback)((newSince, newRev) => {
    paneRouter.setParams(_objectSpread(_objectSpread({}, paneRouter.params), {}, {
      since: newSince,
      rev: newRev ? newRev : undefined
    }));
  }, [paneRouter]);
  var displayed = value;

  if (historyController.onOlderRevision()) {
    displayed = historyController.displayed();
  }

  return /*#__PURE__*/_react.default.createElement(_context.DocumentHistoryContext.Provider, {
    value: {
      displayed,
      timeline,
      historyController,
      setRange,
      close,
      open,
      timelineMode,
      setTimelineMode
    }
  }, children);
}