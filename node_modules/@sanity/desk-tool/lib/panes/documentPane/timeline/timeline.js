"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timeline = void 0;

var _react = _interopRequireWildcard(require("react"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _timelineItem = require("./timelineItem");

var _timeline = _interopRequireDefault(require("./timeline.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Must be a positive number
var LOAD_MORE_OFFSET = 20;
var Timeline = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  var timeline = _ref.timeline,
      disabledBeforeSelection = _ref.disabledBeforeSelection,
      topSelection = _ref.topSelection,
      bottomSelection = _ref.bottomSelection,
      onSelect = _ref.onSelect,
      onLoadMore = _ref.onLoadMore;
  var rootRef = (0, _react.useRef)(null);
  var listRef = (0, _react.useRef)(null);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      loadingElement = _useState2[0],
      setLoadingElement = _useState2[1];

  var state = disabledBeforeSelection ? 'disabled' : 'enabled';
  var checkIfLoadIsNeeded = (0, _react.useCallback)(() => {
    var rootEl = rootRef.current;

    if (loadingElement && rootEl) {
      var offsetHeight = rootEl.offsetHeight,
          scrollTop = rootEl.scrollTop;
      var bottomPosition = offsetHeight + scrollTop + LOAD_MORE_OFFSET;
      var isVisible = loadingElement.offsetTop < bottomPosition;

      if (isVisible) {
        // @todo: find out why, for some reason, it won't load without RAF wrapper
        requestAnimationFrame(() => onLoadMore(isVisible));
      }
    }
  }, [onLoadMore, loadingElement]); // This is needed because we set the reference element both for
  // the provided `ref` from `forwardRef`, and the local `rootRef`.

  var setRef = (0, _react.useCallback)(el => {
    if (ref) {
      if (typeof ref === 'function') ref(el);
      if (typeof ref === 'object') ref.current = el;
    }

    rootRef.current = el;
  }, [ref]); // Load whenever it's needed

  (0, _react.useEffect)(checkIfLoadIsNeeded, [checkIfLoadIsNeeded]); // On mount: Scroll to selected timeline item

  (0, _react.useEffect)(() => {
    var _listRef$current;

    var selectedEl = (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.querySelector('[data-state="selected"]');

    if (selectedEl) {
      window.requestAnimationFrame(() => {
        selectedEl.scrollIntoView({
          block: 'center'
        });
      });
    }
  }, []);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _timeline.default.root,
    ref: setRef,
    onScroll: checkIfLoadIsNeeded
  }, /*#__PURE__*/_react.default.createElement("ol", {
    className: _timeline.default.list,
    ref: listRef
  }, timeline.mapChunks(chunk => {
    var isSelectionTop = topSelection === chunk;
    var isSelectionBottom = bottomSelection === chunk;

    if (isSelectionTop) {
      state = 'withinSelection';
    }

    if (isSelectionBottom) {
      state = 'selected';
    }

    var item = /*#__PURE__*/_react.default.createElement(_timelineItem.TimelineItem, {
      chunk: chunk,
      isSelectionBottom: isSelectionBottom,
      isSelectionTop: isSelectionTop,
      key: chunk.id,
      state: state,
      onSelect: onSelect,
      type: chunk.type,
      timestamp: chunk.endTimestamp
    }); // Flip it back to normal after we've rendered the active one.


    if (state === 'selected') {
      state = 'enabled';
    }

    return item;
  })), !timeline.reachedEarliestEntry && /*#__PURE__*/_react.default.createElement("div", {
    className: _timeline.default.loading,
    ref: setLoadingElement
  }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
    center: true
  })));
});
exports.Timeline = Timeline;
Timeline.displayName = 'Timeline';