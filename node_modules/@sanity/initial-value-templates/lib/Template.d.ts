import { TemplateParameter } from './TemplateParameters';
declare type ValueResolver = (parameters: {
    [key: string]: any;
}) => {
    [key: string]: any;
};
export interface Template {
    id: string;
    title: string;
    description?: string;
    schemaType: string;
    icon?: Function;
    value: ValueResolver | {
        [key: string]: any;
    };
    parameters?: TemplateParameter[];
}
export declare class TemplateBuilder {
    spec: Partial<Template>;
    constructor(spec?: Template);
    id(id: string): TemplateBuilder;
    getId(): string | undefined;
    title(title: string): TemplateBuilder;
    description(description: string): TemplateBuilder;
    getDescription(): string | undefined;
    getTitle(): string | undefined;
    schemaType(typeName: string): TemplateBuilder;
    getSchemaType(): string | undefined;
    icon(icon: Function): TemplateBuilder;
    getIcon(): Function | undefined;
    value(value: ValueResolver | {
        [key: string]: any;
    }): TemplateBuilder;
    getValue(): ValueResolver | {
        [key: string]: any;
    } | undefined;
    parameters(parameters: TemplateParameter[]): TemplateBuilder;
    getParameters(): TemplateParameter[] | undefined;
    serialize(): Template;
    clone(withSpec?: Partial<Template>): TemplateBuilder;
}
export {};
//# sourceMappingURL=Template.d.ts.map