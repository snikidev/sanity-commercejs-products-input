"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toObservable = toObservable;
exports.useObservable = useObservable;
exports.useObservableState = useObservableState;
exports.useObservableContext = useObservableContext;

var React = _interopRequireWildcard(require("react"));

var _rxjs = require("rxjs");

var _shallowEquals = _interopRequireDefault(require("shallow-equals"));

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function toObservable(value, setup) {
  var isInitial = React.useRef(true);
  var subject = React.useRef(new _rxjs.BehaviorSubject(value));
  React.useEffect(() => {
    if (isInitial.current) {
      isInitial.current = false;
    } else {
      // emit only on update
      subject.current.next(value);
    }
  }, [value]);
  React.useEffect(() => {
    return () => {
      return subject.current.complete();
    };
  }, []);
  var o = subject.current.asObservable().pipe((0, _operators.distinctUntilChanged)(_shallowEquals.default));
  return setup ? setup(o) : o;
}

var isCallable = val => typeof val === 'function';

function getValue(value) {
  return isCallable(value) ? value() : value;
}

function useObservable(observable$, initialValue) {
  var subscription = React.useRef();
  var isInitial = React.useRef(true);

  var _React$useState = React.useState(() => {
    var isSync = true;
    var syncVal = getValue(initialValue);
    subscription.current = observable$.subscribe(nextVal => {
      if (isSync) {
        syncVal = nextVal;
      } else {
        setState(nextVal);
      }
    });
    isSync = false;
    return syncVal;
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      value = _React$useState2[0],
      setState = _React$useState2[1];

  React.useEffect(() => {
    // when the observable$ changes after initial (possibly sync render)
    if (!isInitial.current) {
      subscription.current = observable$.subscribe(nextVal => setState(nextVal));
    }

    isInitial.current = false;
    return () => {
      if (subscription.current) {
        subscription.current.unsubscribe();
      }
    };
  }, [observable$]);
  return value;
}

function useObservableState(initial) {
  var _React$useState3 = React.useState(initial),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      value = _React$useState4[0],
      update = _React$useState4[1];

  return [toObservable(value), update];
}

function useObservableContext(context) {
  var value = React.useContext(context);
  return toObservable(value);
}