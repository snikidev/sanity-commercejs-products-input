"use strict";

var _configSanity = _interopRequireDefault(require("config:sanity"));

var _configureClient = _interopRequireDefault(require("part:@sanity/base/configure-client?"));

var _client = _interopRequireDefault(require("@sanity/client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var deprecationMessage = "[deprecation] The Sanity client is now exposed in CommonJS format.\n\nFor instance, change:\n  `const client = require('part:@sanity/base/client').default`\n\nTo the following:\n  `const client = require('part:@sanity/base/client')`\n";
var fallbackConfig = {
  projectId: 'UNSPECIFIED',
  dataset: 'UNSPECIFIED'
};

var apiConfig = _objectSpread(_objectSpread(_objectSpread({}, fallbackConfig), _configSanity.default.api), {}, {
  withCredentials: true,
  useCdn: false
});

var client = (0, _client.default)(apiConfig);
var configuredClient = experimental(_configureClient.default ? (0, _configureClient.default)((0, _client.default)(apiConfig)) : client);

function experimental(original) {
  var useExperimental = false;

  try {
    useExperimental = Boolean(window.localStorage.vx);
  } catch (err) {// nah
  }

  if (!useExperimental) {
    return original;
  }

  ;
  [original.clientConfig, original.observable.clientConfig].forEach(cfg => {
    cfg.url = cfg.url.replace(/\/v1$/, '/vX');
    cfg.cdnUrl = cfg.cdnUrl.replace(/\/v1$/, '/vX');
  });
  return original;
} // Warn when people use `.default`


Object.defineProperty(configuredClient, 'default', {
  get() {
    // eslint-disable-next-line no-console
    console.warn(deprecationMessage);
    return configuredClient;
  }

}); // Expose as CJS to allow Node scripts to consume it without `.default`
// eslint-disable-next-line @typescript-eslint/no-var-requires

module.exports = configuredClient;