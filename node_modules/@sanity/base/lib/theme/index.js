"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.theme = void 0;

var _ui = require("@sanity/ui");

var _sanityCssCustomProperties = _interopRequireDefault(require("sanity:css-custom-properties"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

window.__sanityLegacyTheme = _sanityCssCustomProperties.default; // NOTE: This mapping is needed only in a transition period between legacy CSS custom properties,
// and the new Theme API provided by Sanity UI.

var color = _objectSpread(_objectSpread({}, _ui.studioTheme.color), {}, {
  light: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light), {}, {
    default: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.default), {}, {
      base: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.default.base), {}, {
        bg: _sanityCssCustomProperties.default['--component-bg'],
        fg: _sanityCssCustomProperties.default['--component-text-color'],
        border: _sanityCssCustomProperties.default['--hairline-color']
      }),
      card: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.default.card), {}, {
        enabled: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.default.card.enabled), {}, {
          bg: _sanityCssCustomProperties.default['--component-bg'],
          fg: _sanityCssCustomProperties.default['--component-text-color'],
          border: _sanityCssCustomProperties.default['--hairline-color']
        })
      })
    }),
    transparent: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.transparent), {}, {
      base: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.transparent.base), {}, {
        bg: _sanityCssCustomProperties.default['--body-bg'],
        fg: _sanityCssCustomProperties.default['--body-text'],
        border: _sanityCssCustomProperties.default['--hairline-color']
      }),
      card: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.transparent.card), {}, {
        enabled: _objectSpread(_objectSpread({}, _ui.studioTheme.color.light.transparent.card.enabled), {}, {
          bg: _sanityCssCustomProperties.default['--body-bg'],
          fg: _sanityCssCustomProperties.default['--body-text'],
          border: _sanityCssCustomProperties.default['--hairline-color']
        })
      })
    })
  })
});

var theme = _objectSpread(_objectSpread({}, _ui.studioTheme), {}, {
  color,
  media: [parseInt(_sanityCssCustomProperties.default['--screen-medium-break'], 10) || 512, parseInt(_sanityCssCustomProperties.default['--screen-default-break'], 10) || 640, parseInt(_sanityCssCustomProperties.default['--screen-large-break'], 10) || 960, parseInt(_sanityCssCustomProperties.default['--screen-xlarge-break'], 10) || 1600]
});

exports.theme = theme;