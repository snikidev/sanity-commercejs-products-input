"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUserColorManager = createUserColorManager;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _color = require("@sanity/color");

var defaultCurrentUserHue = 'purple'; // Remove green and red because they can be confused with "add" and "remove"
// Remove gray because it looks like "color not found"

var defaultHues = _color.COLOR_HUES.filter(hue => hue !== 'green' && hue !== 'red' && hue !== 'gray');

var defaultColors = defaultHues.reduce((colors, hue) => {
  colors[hue] = {
    background: _color.color[hue][100].hex,
    border: _color.color[hue][300].hex,
    text: _color.color[hue][700].hex,
    tints: _color.color[hue]
  };
  return colors;
}, {});
var defaultAnonymousColor = {
  background: _color.color.gray[100].hex,
  border: _color.color.gray[300].hex,
  text: _color.color.gray[700].hex,
  tints: _color.color.gray
};

function createUserColorManager(options) {
  var userColors = options && options.colors || defaultColors;
  var anonymousColor = (options === null || options === void 0 ? void 0 : options.anonymousColor) || defaultAnonymousColor;
  var currentUserColor = options && options.currentUserColor || defaultCurrentUserHue;

  if (!userColors.hasOwnProperty(currentUserColor)) {
    throw new Error("'colors' must contain 'currentUserColor' (".concat(currentUserColor, ")"));
  }

  var colorHues = Object.keys(userColors);
  var subscriptions = new Map();
  var previouslyAssigned = new Map();
  var assignedCounts = colorHues.reduce((counts, color) => {
    counts[color] = 0;
    return counts;
  }, {}); // This isn't really needed because we're reusing subscriptions,
  // but is useful for debugging and poses a minimal overhead

  var assigned = new Map();
  var currentUserId;

  if (options !== null && options !== void 0 && options.userStore) {
    options.userStore.currentUser.pipe((0, _operators.filter)(evt => evt.type === 'snapshot')).subscribe(evt => setCurrentUser(evt.user ? evt.user.id : null));
  }

  return {
    get,
    listen
  };

  function get(userId) {
    if (!userId) {
      return anonymousColor;
    }

    return userColors[getUserHue(userId)];
  }

  function getUserHue(userId) {
    if (userId === currentUserId) {
      return currentUserColor;
    }

    var assignedHue = assigned.get(userId);

    if (assignedHue) {
      return assignedHue;
    } // Prefer to reuse the color previously assigned, BUT:
    // ONLY if it's unused -or- there are no other unused colors


    var prevHue = previouslyAssigned.get(userId);

    if (prevHue && (assignedCounts[prevHue] === 0 || !hasUnusedColor())) {
      return assignHue(userId, prevHue);
    } // Prefer "static" color based on user ID if unused


    var preferredHue = getPreferredHue(userId);

    if (assignedCounts[preferredHue] === 0) {
      return assignHue(userId, preferredHue);
    } // Fall back to least used color, with a preference on the previous
    // used color if there are ties for least used


    return assignHue(userId, getLeastUsedHue(prevHue));
  }

  function listen(userId) {
    var subscription = subscriptions.get(userId);

    if (subscription) {
      return subscription;
    }

    var hue = getUserHue(userId);
    subscription = getObservableColor(userId, hue);
    subscriptions.set(userId, subscription);
    return subscription;
  }

  function assignHue(userId, hue) {
    assigned.set(userId, hue);
    previouslyAssigned.set(userId, hue);
    assignedCounts[hue]++;
    return hue;
  }

  function unassignHue(userId, hue) {
    assigned.delete(userId);
    assignedCounts[hue]--;
  }

  function getUnusedColor() {
    return colorHues.find(colorHue => assignedCounts[colorHue] === 0);
  }

  function hasUnusedColor() {
    return Boolean(getUnusedColor());
  }

  function getLeastUsedHue(tieBreakerPreference) {
    var leastUses = +Infinity;
    var leastUsed = [];
    colorHues.forEach(colorHue => {
      var uses = assignedCounts[colorHue];

      if (uses === leastUses) {
        leastUsed.push(colorHue);
      } else if (uses < leastUses) {
        leastUses = uses;
        leastUsed = [colorHue];
      }
    });
    return tieBreakerPreference && leastUsed.includes(tieBreakerPreference) ? tieBreakerPreference : leastUsed[0];
  }

  function getObservableColor(userId, hue) {
    return new _rxjs.Observable(subscriber => {
      var userColor = userColors[hue];
      subscriber.next(userColor);
      return () => {
        subscriptions.delete(userId);
        unassignHue(userId, hue);
      };
    }).pipe((0, _operators.shareReplay)({
      refCount: true
    }));
  }

  function setCurrentUser(userId) {
    currentUserId = userId;
    assignedCounts[currentUserColor] += userId ? 1 : -1;
  }

  function getPreferredHue(userId) {
    var hash = 0;

    for (var i = 0; i < userId.length; i++) {
      // eslint-disable-next-line no-bitwise
      hash = (hash << 5) - hash + userId.charCodeAt(i) | 0;
    }

    return colorHues[Math.abs(hash) % colorHues.length];
  }
}