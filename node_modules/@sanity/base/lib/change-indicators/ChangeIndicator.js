"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChangeIndicatorScope = ChangeIndicatorScope;
exports.ChangeIndicatorProvider = ChangeIndicatorProvider;
exports.ChangeIndicator = exports.ContextProvidedChangeIndicator = exports.ChangeIndicatorCompareValueProvider = exports.ChangeIndicatorWithProvidedFullPath = exports.CoreChangeIndicator = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactFastCompare = _interopRequireDefault(require("react-fast-compare"));

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _tracker = require("./tracker");

var _ChangeIndicatorContext = require("./ChangeIndicatorContext");

var _ChangeBar = require("./ChangeBar");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var isPrimitive = value => typeof value === 'string' || typeof value === 'boolean' || typeof value === 'undefined' || typeof value === 'number';

var canCompareShallow = (valueA, valueB) => {
  if (typeof valueA === 'undefined' || typeof valueB === 'undefined' || typeof valueA === null || typeof valueB === null) {
    return true;
  }

  return isPrimitive(valueA) && isPrimitive(valueB);
};

var ChangeBarWrapper = props => {
  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      hasHover = _React$useState2[0],
      setHover = _React$useState2[1];

  var onMouseEnter = _react.default.useCallback(() => setHover(true), []);

  var onMouseLeave = _react.default.useCallback(() => setHover(false), []);

  var ref = _react.default.useRef(null);

  (0, _tracker.useReporter)("field-".concat(PathUtils.toString(props.fullPath)), () => ({
    element: ref.current,
    path: props.fullPath,
    isChanged: props.isChanged,
    hasFocus: props.hasFocus,
    hasHover: hasHover
  }), // note: deepCompare should be ok here since we're not comparing deep values
  _reactFastCompare.default);
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    className: props.className,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave
  }, /*#__PURE__*/_react.default.createElement(_ChangeBar.ChangeBar, {
    hasFocus: props.hasFocus,
    isChanged: props.isChanged
  }, props.children));
};

function ChangeIndicatorScope(props) {
  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  return /*#__PURE__*/_react.default.createElement(ChangeIndicatorProvider, {
    path: props.path,
    focusPath: parentContext.focusPath,
    value: PathUtils.get(parentContext.value, props.path),
    compareValue: PathUtils.get(parentContext.compareValue, props.path)
  }, props.children);
}

function ChangeIndicatorProvider(props) {
  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var fullPath = parentContext.fullPath.concat(props.path);
  return /*#__PURE__*/_react.default.createElement(_ChangeIndicatorContext.ChangeIndicatorContext.Provider, {
    value: {
      value: props.value,
      compareValue: props.compareValue,
      focusPath: props.focusPath || [],
      path: props.path,
      fullPath: fullPath
    }
  }, props.children);
}

var CoreChangeIndicator = (_ref) => {
  var className = _ref.className,
      hidden = _ref.hidden,
      fullPath = _ref.fullPath,
      value = _ref.value,
      compareValue = _ref.compareValue,
      hasFocus = _ref.hasFocus,
      compareDeep = _ref.compareDeep,
      children = _ref.children;
  // todo: lazy compare debounced (possibly with intersection observer)
  var isChanged = canCompareShallow(value, compareValue) && value !== compareValue || compareDeep && !(0, _reactFastCompare.default)(value, compareValue);

  if (hidden) {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children);
  }

  return /*#__PURE__*/_react.default.createElement(ChangeBarWrapper, {
    className: className,
    isChanged: isChanged,
    fullPath: fullPath,
    hasFocus: hasFocus
  }, children);
};

exports.CoreChangeIndicator = CoreChangeIndicator;

var ChangeIndicatorWithProvidedFullPath = (_ref2) => {
  var className = _ref2.className,
      hidden = _ref2.hidden,
      path = _ref2.path,
      value = _ref2.value,
      hasFocus = _ref2.hasFocus,
      compareDeep = _ref2.compareDeep,
      children = _ref2.children;

  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var fullPath = parentContext.fullPath.concat(path);
  return /*#__PURE__*/_react.default.createElement(CoreChangeIndicator, {
    hidden: hidden,
    className: className,
    value: value,
    compareValue: PathUtils.get(parentContext.compareValue, path),
    hasFocus: hasFocus,
    fullPath: fullPath,
    compareDeep: compareDeep
  }, children);
};

exports.ChangeIndicatorWithProvidedFullPath = ChangeIndicatorWithProvidedFullPath;

var ChangeIndicatorCompareValueProvider = props => {
  var parentContext = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  return /*#__PURE__*/_react.default.createElement(_ChangeIndicatorContext.ChangeIndicatorContext.Provider, {
    value: {
      value: props.value,
      compareValue: props.compareValue,
      focusPath: parentContext.focusPath || [],
      path: parentContext.path,
      fullPath: parentContext.fullPath
    }
  }, props.children);
};

exports.ChangeIndicatorCompareValueProvider = ChangeIndicatorCompareValueProvider;

var ContextProvidedChangeIndicator = props => {
  var context = _react.default.useContext(_ChangeIndicatorContext.ChangeIndicatorContext);

  var value = context.value,
      compareValue = context.compareValue,
      path = context.path,
      focusPath = context.focusPath,
      fullPath = context.fullPath;
  return props.disabled ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, props.children) : /*#__PURE__*/_react.default.createElement(CoreChangeIndicator, {
    fullPath: fullPath,
    value: value,
    compareValue: compareValue,
    hasFocus: PathUtils.hasFocus(focusPath, path),
    compareDeep: props.compareDeep || false,
    className: props.className
  }, props.children);
};

exports.ContextProvidedChangeIndicator = ContextProvidedChangeIndicator;
var ChangeIndicator = ContextProvidedChangeIndicator;
exports.ChangeIndicator = ChangeIndicator;