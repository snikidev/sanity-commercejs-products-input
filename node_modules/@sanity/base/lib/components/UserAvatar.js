"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserAvatar = UserAvatar;

var _react = _interopRequireWildcard(require("react"));

var _avatar = require("part:@sanity/components/avatar");

var _hooks = require("../hooks");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function nameToInitials(fullName) {
  var namesArray = fullName.split(' ');

  if (namesArray.length === 1) {
    return "".concat(namesArray[0].charAt(0));
  }

  return "".concat(namesArray[0].charAt(0)).concat(namesArray[namesArray.length - 1].charAt(0));
}

function UserAvatar(props) {
  if (isLoaded(props)) {
    return /*#__PURE__*/_react.default.createElement(StaticUserAvatar, props);
  }

  return /*#__PURE__*/_react.default.createElement(UserAvatarLoader, props);
}

function StaticUserAvatar(_ref) {
  var user = _ref.user,
      animateArrowFrom = _ref.animateArrowFrom,
      position = _ref.position,
      size = _ref.size,
      status = _ref.status,
      tone = _ref.tone;

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      imageLoadError = _useState2[0],
      setImageLoadError = _useState2[1];

  var userColor = (0, _hooks.useUserColor)(user.id);
  var imageUrl = imageLoadError ? undefined : user === null || user === void 0 ? void 0 : user.imageUrl;
  return /*#__PURE__*/_react.default.createElement(_avatar.Avatar, {
    animateArrowFrom: animateArrowFrom,
    arrowPosition: position,
    color: {
      dark: userColor.tints[400].hex,
      light: userColor.tints[500].hex
    },
    initials: (user === null || user === void 0 ? void 0 : user.displayName) && nameToInitials(user.displayName),
    src: imageUrl,
    onImageLoadError: setImageLoadError,
    size: size,
    status: status,
    title: user === null || user === void 0 ? void 0 : user.displayName,
    tone: tone
  });
}

function UserAvatarLoader(_ref2) {
  var userId = _ref2.userId,
      loadedProps = _objectWithoutProperties(_ref2, ["userId"]);

  var _useUser = (0, _hooks.useUser)(userId),
      isLoading = _useUser.isLoading,
      error = _useUser.error,
      value = _useUser.value;

  if (isLoading || error || !value) {
    // @todo How do we handle this?
    return null;
  }

  return /*#__PURE__*/_react.default.createElement(UserAvatar, _extends({}, loadedProps, {
    user: value
  }));
}

function isLoaded(props) {
  var loadedProps = props;
  return typeof loadedProps.user !== 'undefined' && typeof loadedProps.user.id === 'string';
}