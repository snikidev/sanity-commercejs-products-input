"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var eventBus = window.__webpack_hot_middleware_eventbus__;
var events = eventBus ? eventBus.eventTypes : {};
var STATE_CONNECTING = 0;
var STATE_OPEN = 1;
var STATE_CLOSED = 2;

class DevServerStatus extends _react.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleEvent", evt => {
      switch (evt.type) {
        case events.EVENT_DISCONNECTED:
          return this.setState({
            connectionState: STATE_CLOSED
          });

        case events.EVENT_CONNECTING:
          return this.setState({
            connectionState: STATE_CONNECTING
          });

        case events.EVENT_CONNECTED:
          return this.handleConnected();

        case events.EVENT_BUILT:
        case events.EVENT_BUILDING:
        case events.EVENT_UP_TO_DATE:
          return this.setState((_ref) => {
            var reloadWasRequired = _ref.reloadRequired;
            return {
              buildState: evt.type,
              reloadRequired: reloadWasRequired || evt.requiresReload || false
            };
          });

        default:
          if (evt.requiresReload && !this.state.reloadRequired) {
            this.setState({
              buildState: events.EVENT_BUILT,
              reloadRequired: true
            });
          }

      }

      return null;
    });

    _defineProperty(this, "handleConnected", () => {
      this.setState({
        connectionState: STATE_OPEN
      });

      if (this.state.hasHadConnection) {
        // We reconnected after being disconnected.
        // Hot-reloading won't be applied automatically.
        // We should consider showing a message telling the user to reload,
        // or just programatically reload the page:
        window.location.reload();
      } else {
        this.setState({
          hasHadConnection: true
        });
      }
    });

    this.enabled = __DEV__ && eventBus;
    this.state = {
      connectionState: STATE_CONNECTING,
      hasHadConnection: false,
      buildState: events.EVENT_UP_TO_DATE,
      reloadRequired: false
    };
  }

  componentDidMount() {
    if (!this.enabled) {
      return;
    }

    this.hmrUnsubscribe = eventBus.subscribe(this.handleEvent);
  }

  componentWillUnmount() {
    if (this.hmrUnsubscribe) {
      this.hmrUnsubscribe();
    }
  }

  renderBuildStatus() {
    var _this$state = this.state,
        reloadRequired = _this$state.reloadRequired,
        buildState = _this$state.buildState;

    if (reloadRequired) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        id: "__dev-server-status",
        kind: "warning",
        isPersisted: true,
        isCloseable: false,
        title: /*#__PURE__*/_react.default.createElement("strong", null, "Reload required!"),
        subtitle: /*#__PURE__*/_react.default.createElement("div", null, "To see your latest changes, you need to reload the browser window."),
        action: {
          title: 'Reload',
          callback: () => window.location.reload()
        },
        allowDuplicateSnackbarType: true
      });
    }

    if (buildState === events.EVENT_BUILDING) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        id: "__dev-server-status",
        kind: "warning",
        isPersisted: true,
        isCloseable: false,
        title: /*#__PURE__*/_react.default.createElement(_spinner.default, {
          delay: 0,
          inline: true,
          message: "Rebuilding bundle\u2026"
        }),
        allowDuplicateSnackbarType: true
      });
    }

    return null;
  }

  render() {
    // We're in production or missing the HMR event bus
    if (!this.enabled) {
      return null;
    }

    var _this$state2 = this.state,
        connectionState = _this$state2.connectionState,
        hasHadConnection = _this$state2.hasHadConnection;
    var isDisconnected = connectionState === STATE_CONNECTING || connectionState === STATE_CLOSED; // We are disconnected

    if (isDisconnected && hasHadConnection) {
      return /*#__PURE__*/_react.default.createElement(_default2.default, {
        id: "__dev-server-status",
        kind: "warning",
        isPersisted: true,
        isCloseable: false,
        title: /*#__PURE__*/_react.default.createElement("strong", null, "Disconnected from the dev server!"),
        subtitle: /*#__PURE__*/_react.default.createElement("div", null, "To see your latest changes, restart the Studio with ", /*#__PURE__*/_react.default.createElement("code", null, "sanity start"), " in your project folder."),
        allowDuplicateSnackbarType: true
      });
    } // We're still trying to connect for the first time


    if (!hasHadConnection) {
      return null;
    } // We're connected, show build status if we have anything worthwhile


    return this.renderBuildStatus();
  }

}

var _default = DevServerStatus;
exports.default = _default;