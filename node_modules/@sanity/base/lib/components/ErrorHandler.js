"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _default = _interopRequireDefault(require("part:@sanity/components/snackbar/default"));

var _ErrorHandler = _interopRequireDefault(require("./styles/ErrorHandler.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SANITY_ERROR_HANDLER = Symbol.for('SANITY_ERROR_HANDLER');

class ErrorHandler extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "state", {
      error: null
    });

    _defineProperty(this, "handleGlobalError", (msg, url, lineNo, columnNo, err) => {
      // Certain events (ResizeObserver max loop threshold, for instance)
      // only gives a _message_. We choose to ignore these events since
      // they are usually not _fatal_
      if (!err) {
        return;
      } // Certain errors should be ignored


      if ([/unexpected token <$/i // Trying to load HTML as JS
      ].some(item => item.test(err.message))) {
        return;
      } // eslint-disable-next-line no-console


      console.error(err);
      this.setState({
        error: err
      });
    });

    _defineProperty(this, "handleClose", () => {
      this.setState({
        error: null
      });
    });

    this.handleGlobalError = this.handleGlobalError.bind(this);
    this.handleGlobalError.identity = SANITY_ERROR_HANDLER;
  }

  componentDidMount() {
    // Only store the original error handler if it wasn't a copy of _this_ error handler
    if (window.onerror && window.onerror.identity !== SANITY_ERROR_HANDLER) {
      this.originalErrorHandler = window.onerror;
    }

    window.onerror = this.handleGlobalError;
  }

  componentWillUnmount() {
    window.onerror = this.originalErrorHandler || window.onerror;
  }

  render() {
    var error = this.state.error;

    if (!error) {
      return null;
    }

    var message = __DEV__ ? "An error occured: ".concat(error.message) : 'An error occured';
    return /*#__PURE__*/_react.default.createElement(_default.default, {
      kind: "error",
      onAction: this.handleClose,
      title: /*#__PURE__*/_react.default.createElement("strong", null, message),
      timeout: 8000,
      subtitle: "Check your browser's JavaScript console for details."
    });
  }

}

exports.default = ErrorHandler;