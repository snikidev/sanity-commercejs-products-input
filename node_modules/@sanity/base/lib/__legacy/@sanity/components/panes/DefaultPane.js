"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _negate2 = _interopRequireDefault(require("lodash/negate"));

var _structure = require("@sanity/structure");

var _classnames = _interopRequireDefault(require("classnames"));

var _menuButton = require("part:@sanity/components/menu-button");

var _default2 = _interopRequireDefault(require("part:@sanity/components/menus/default"));

var _moreVertIcon = _interopRequireDefault(require("part:@sanity/base/more-vert-icon"));

var _router = require("part:@sanity/base/router");

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _intent = _interopRequireDefault(require("part:@sanity/components/buttons/intent"));

var _scroll = require("part:@sanity/components/scroll");

var _tabPanel = _interopRequireDefault(require("part:@sanity/components/tabs/tab-panel"));

var _react = _interopRequireDefault(require("react"));

var _helpers = require("../helpers");

var _Styleable = _interopRequireDefault(require("../utilities/Styleable"));

var _DefaultPane = _interopRequireDefault(require("./DefaultPane.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getActionKey(action, index) {
  var title = String(action.title);
  return (typeof action.action === 'string' ? action.action + title : title) || index;
}

function noActionFn() {
  // eslint-disable-next-line no-console
  console.warn('No handler defined for action');
}

var noop = () => {
  /* intentional noop */
};

var isActionButton = item => Boolean(item.showAsAction);

var isMenuButton = (0, _negate2.default)(isActionButton);

class DefaultPane extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "actionHandlers", {});

    _defineProperty(this, "rootElement", null);

    _defineProperty(this, "templateMenuId", void 0);

    _defineProperty(this, "paneMenuId", void 0);

    _defineProperty(this, "handleCloseContextMenu", () => {
      this.setState({
        isMenuOpen: false
      });
    });

    _defineProperty(this, "setContextMenuOpen", val => {
      this.setState({
        isMenuOpen: val
      });
    });

    _defineProperty(this, "setInitialValueMenuOpen", val => {
      this.setState({
        isInitialValueMenuOpen: val
      });
    });

    _defineProperty(this, "handleCloseTemplateMenu", () => {
      this.setState({
        isInitialValueMenuOpen: false
      });
    });

    _defineProperty(this, "handleRootClick", () => {
      var _this$props = this.props,
          onExpand = _this$props.onExpand,
          isCollapsed = _this$props.isCollapsed,
          index = _this$props.index;

      if (isCollapsed && onExpand) {
        onExpand(index);
      }
    });

    _defineProperty(this, "handleTitleClick", () => {
      var _this$props2 = this.props,
          onCollapse = _this$props2.onCollapse,
          isCollapsed = _this$props2.isCollapsed,
          index = _this$props2.index;

      if (!isCollapsed && onCollapse) {
        onCollapse(index);
      }
    });

    _defineProperty(this, "handleMenuAction", item => {
      this.setContextMenuOpen(false);

      if (typeof item.action === 'function') {
        item.action(item.params);
        return;
      }

      var onAction = this.props.onAction;
      var actionHandled = onAction && onAction(item);

      if (actionHandled) {
        return;
      }

      var handler = typeof item.action === 'string' && this.actionHandlers[item.action] || noActionFn;
      handler(item.params, this);
    });

    _defineProperty(this, "renderIntentAction", (action, i) => {
      var _this$props$styles = this.props.styles,
          styles = _this$props$styles === void 0 ? {} : _this$props$styles;
      return /*#__PURE__*/_react.default.createElement(_intent.default, {
        className: styles.actionButton,
        icon: action.icon,
        intent: action.intent && action.intent.type,
        key: getActionKey(action, i),
        kind: "simple",
        padding: "small",
        params: action.intent && action.intent.params,
        title: typeof action.title === 'string' ? action.title : undefined
      });
    });

    _defineProperty(this, "renderActionMenuItem", (item, index) => {
      if (!item) return null;
      var _this$props$styles2 = this.props.styles,
          styles = _this$props$styles2 === void 0 ? {} : _this$props$styles2;
      var params = item.intent && item.intent.params;
      var Icon = item.icon;
      return /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
        className: styles.initialValueTemplateMenuItem,
        intent: "create",
        key: item.key || index,
        onClick: this.handleCloseTemplateMenu,
        params: params
      }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, item.title), typeof params === 'object' &&
      /*#__PURE__*/
      // @todo: typings
      _react.default.createElement("div", {
        className: styles.initialValueTemplateSubtitle
      }, params.type)), Icon && /*#__PURE__*/_react.default.createElement("div", {
        className: styles.initialValueTemplateMenuItemIcon
      }, /*#__PURE__*/_react.default.createElement(Icon, null)));
    });

    _defineProperty(this, "renderAction", (action, i) => {
      if (action.intent) {
        return this.renderIntentAction(action, i);
      }

      var styles = this.props.styles || {}; // @todo: typings

      var items = this.props.initialValueTemplates ? _structure.StructureBuilder.menuItemsFromInitialValueTemplateItems(this.props.initialValueTemplates) : [];
      var Icon = action.icon;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: styles.menuWrapper,
        key: getActionKey(action, i)
      }, action.action !== 'toggleTemplateSelectionMenu' && /*#__PURE__*/_react.default.createElement(_default3.default, {
        "data-menu-button-id": this.templateMenuId,
        icon: Icon,
        kind: "simple",
        padding: "small",
        title: typeof action.title === 'string' ? action.title : undefined,
        onClick: this.handleMenuAction.bind(this, action)
      }), action.action === 'toggleTemplateSelectionMenu' && /*#__PURE__*/_react.default.createElement(_menuButton.MenuButton, {
        boundaryElement: this.rootElement,
        buttonProps: {
          'aria-label': 'Menu',
          'aria-haspopup': 'menu',
          'aria-expanded': this.state.isInitialValueMenuOpen,
          'aria-controls': this.templateMenuId,
          icon: Icon,
          kind: 'simple',
          padding: 'small',
          selected: this.state.isInitialValueMenuOpen,
          title: 'Create new document'
        },
        menu: /*#__PURE__*/_react.default.createElement("div", {
          className: styles.initialValueTemplateMenu
        }, items.map((item, index) => this.renderActionMenuItem(item, index))),
        open: this.state.isInitialValueMenuOpen,
        placement: "bottom",
        setOpen: this.setInitialValueMenuOpen
      }));
    });

    _defineProperty(this, "setRootElement", el => {
      this.rootElement = el;
    });

    this.state = {
      isMenuOpen: false,
      isInitialValueMenuOpen: false
    }; // Passed to rendered <Menu> components. This prevents the "click outside"
    // functionality from kicking in when pressing the toggle menu button

    this.templateMenuId = Math.random().toString(36).substr(2, 6);
    this.paneMenuId = Math.random().toString(36).substr(2, 6);
  } // Triggered by clicking "outside" of the menu when open, or after triggering action


  renderActionNodes() {
    var _this$props3 = this.props,
        isCollapsed = _this$props3.isCollapsed,
        _this$props3$menuItem = _this$props3.menuItems,
        menuItems = _this$props3$menuItem === void 0 ? [] : _this$props3$menuItem,
        renderActions = _this$props3.renderActions;
    var actions = menuItems.filter(action => action.showAsAction && (!isCollapsed || typeof action.showAsAction === 'object' && action.showAsAction.whenCollapsed));

    if (renderActions) {
      return renderActions(actions);
    }

    return actions.map(this.renderAction);
  }

  renderHeaderToolsOverflowMenu() {
    var _this$props4 = this.props,
        _this$props4$styles = _this$props4.styles,
        styles = _this$props4$styles === void 0 ? {} : _this$props4$styles,
        _this$props4$menuItem = _this$props4.menuItems,
        menuItems = _this$props4$menuItem === void 0 ? [] : _this$props4$menuItem,
        menuItemGroups = _this$props4.menuItemGroups;
    var items = menuItems.filter(isMenuButton);
    var isMenuOpen = this.state.isMenuOpen;

    if (items.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerToolContainer
    }, /*#__PURE__*/_react.default.createElement(_menuButton.MenuButton, {
      boundaryElement: this.rootElement,
      buttonProps: {
        'aria-label': 'Menu',
        'aria-haspopup': 'menu',
        'aria-expanded': isMenuOpen,
        'aria-controls': this.paneMenuId,
        className: styles.menuOverflowButton,
        icon: _moreVertIcon.default,
        kind: 'simple',
        padding: 'small',
        selected: isMenuOpen,
        title: 'Show menu'
      },
      menu: /*#__PURE__*/_react.default.createElement(_default2.default, {
        id: this.paneMenuId,
        items: items,
        groups: menuItemGroups,
        onAction: this.handleMenuAction,
        onClose: this.handleCloseContextMenu
      }),
      open: isMenuOpen,
      placement: "bottom",
      setOpen: this.setContextMenuOpen
    }));
  }

  renderHeaderTools() {
    var _this$props$styles3 = this.props.styles,
        styles = _this$props$styles3 === void 0 ? {} : _this$props$styles3;
    var headerActionNodes = (0, _helpers.childrenToElementArray)(this.renderActionNodes());
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, headerActionNodes.map((actionNode, actionNodeIndex) => /*#__PURE__*/_react.default.createElement("div", {
      key: actionNodeIndex,
      className: styles.headerToolContainer
    }, actionNode)), this.renderHeaderToolsOverflowMenu());
  }

  // eslint-disable-next-line complexity
  render() {
    var _this$props5 = this.props,
        color = _this$props5.color,
        title = _this$props5.title,
        children = _this$props5.children,
        hasTabs = _this$props5.hasTabs,
        isCollapsed = _this$props5.isCollapsed,
        isLoading = _this$props5.isLoading,
        isScrollable = _this$props5.isScrollable,
        isSelected = _this$props5.isSelected,
        hasSiblings = _this$props5.hasSiblings,
        _this$props5$styles = _this$props5.styles,
        styles = _this$props5$styles === void 0 ? {} : _this$props5$styles,
        footer = _this$props5.footer,
        tabIdPrefix = _this$props5.tabIdPrefix,
        viewId = _this$props5.viewId;
    var mainChildren = isScrollable ? /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, {
      className: styles.scrollContainer,
      tabIndex: -1
    }, children) : /*#__PURE__*/_react.default.createElement("div", {
      className: styles.notScrollable
    }, children);
    var headerViewMenuNode = this.props.renderHeaderViewMenu && this.props.renderHeaderViewMenu();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)(styles.root, isCollapsed && styles.isCollapsed, isSelected ? styles.isActive : styles.isDisabled),
      "data-pane-color": color,
      "data-pane-loading": isLoading,
      onClick: this.handleRootClick,
      ref: this.setRootElement
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.header
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerContent
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.titleContainer
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: styles.title,
      onClick: this.handleTitleClick
    }, title)), /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerTools
    }, this.renderHeaderTools())), headerViewMenuNode && /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerViewMenu
    }, headerViewMenuNode)), hasTabs ? /*#__PURE__*/_react.default.createElement(_tabPanel.default, {
      "aria-labelledby": "".concat(tabIdPrefix, "tab-").concat(viewId),
      className: styles.main,
      id: "".concat(tabIdPrefix, "tabpanel")
    }, mainChildren) : /*#__PURE__*/_react.default.createElement("div", {
      className: styles.main
    }, mainChildren), footer && /*#__PURE__*/_react.default.createElement("div", {
      className: hasTabs && hasSiblings ? styles.hoverFooter : styles.stickyFooter
    }, footer));
  }

}

_defineProperty(DefaultPane, "defaultProps", {
  index: 0,
  footer: undefined,
  hasTabs: false,
  tabIdPrefix: undefined,
  viewId: undefined,
  title: 'Untitled',
  hasSiblings: false,
  isCollapsed: false,
  isSelected: false,
  isScrollable: true,
  renderActions: undefined,
  styles: {},
  children: /*#__PURE__*/_react.default.createElement("div", null),
  onAction: noop,
  menuItems: [],
  menuItemGroups: [],
  initialValueTemplates: [],
  renderHeaderViewMenu: () => null
});

var _default = (0, _Styleable.default)(DefaultPane, _DefaultPane.default);

exports.default = _default;