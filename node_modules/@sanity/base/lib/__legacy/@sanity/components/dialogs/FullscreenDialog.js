"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _classnames = _interopRequireDefault(require("classnames"));

var _closeIcon = _interopRequireDefault(require("part:@sanity/base/close-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _fullscreenStyle = _interopRequireDefault(require("part:@sanity/components/dialogs/fullscreen-style"));

var _layer = require("part:@sanity/components/layer");

var _scroll = require("part:@sanity/components/scroll");

var _react = _interopRequireWildcard(require("react"));

var _hooks = require("../hooks");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function FullscreenDialog(props) {
  return /*#__PURE__*/_react.default.createElement(_layer.Layer, null, /*#__PURE__*/(0, _react.createElement)(FullscreenDialogChildren, props));
}

var _default = FullscreenDialog;
exports.default = _default;

function FullscreenDialogChildren(props) {
  var title = props.title,
      cardClassName = props.cardClassName,
      className = props.className,
      onAction = props.onAction,
      onClickOutside = props.onClickOutside,
      onClose = props.onClose,
      onEscape = props.onEscape,
      _props$isOpen = props.isOpen,
      isOpen = _props$isOpen === void 0 ? true : _props$isOpen,
      actions = props.actions;
  var layer = (0, _layer.useLayer)();
  var isTopLayer = layer.depth === layer.size;

  var _partition2 = (0, _partition4.default)(actions, action => action.secondary),
      _partition3 = _slicedToArray(_partition2, 2),
      secondary = _partition3[0],
      primary = _partition3[1];

  (0, _react.useEffect)(() => {
    var handleKeyDown = event => {
      if ((event.shiftKey || isTopLayer) && event.key === 'Escape') {
        if (onEscape) onEscape(event); // NOTE: This code used to be `onEscape || onClose`
        else if (onClose) onClose();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [isTopLayer, onClose, onEscape]);

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      cardElement = _useState2[0],
      setCardElement = _useState2[1];

  (0, _hooks.useClickOutside)((0, _react.useCallback)(() => {
    if (!isTopLayer) return;
    if (onClickOutside) onClickOutside();
  }, [isTopLayer, onClickOutside]), [cardElement]);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_fullscreenStyle.default.root, isOpen ? _fullscreenStyle.default.isOpen : _fullscreenStyle.default.isClosed, className)
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_fullscreenStyle.default.card, cardClassName),
    ref: setCardElement
  }, (title || onClose) && /*#__PURE__*/_react.default.createElement("header", {
    className: _fullscreenStyle.default.header
  }, title && /*#__PURE__*/_react.default.createElement("h1", {
    className: _fullscreenStyle.default.title
  }, title), onClose && /*#__PURE__*/_react.default.createElement("div", {
    className: _fullscreenStyle.default.actions
  }, /*#__PURE__*/_react.default.createElement(_default2.default, {
    className: _fullscreenStyle.default.closeButton,
    icon: _closeIcon.default,
    kind: "simple",
    onClick: onClose,
    padding: "small"
  }))), props.children && /*#__PURE__*/_react.default.createElement(_scroll.ScrollContainer, {
    className: _fullscreenStyle.default.content
  }, props.children), actions && actions.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _fullscreenStyle.default.actionsWrapper
  }, /*#__PURE__*/_react.default.createElement(_buttonGrid.default, {
    align: "end",
    secondary: secondary.map((action, actionIndex) => /*#__PURE__*/_react.default.createElement(FullscreenDialogActionButton, {
      action: action,
      index: actionIndex // eslint-disable-next-line react/no-array-index-key
      ,
      key: actionIndex,
      onAction: onAction
    }))
  }, primary.map((action, actionIndex) => /*#__PURE__*/_react.default.createElement(FullscreenDialogActionButton, {
    action: action,
    index: actionIndex // eslint-disable-next-line react/no-array-index-key
    ,
    key: actionIndex,
    onAction: onAction
  }))))));
}

function FullscreenDialogActionButton(props) {
  var action = props.action,
      index = props.index,
      onAction = props.onAction;
  var handleClick = (0, _react.useCallback)(() => onAction && onAction(action), [action, onAction]);
  return /*#__PURE__*/_react.default.createElement(_default2.default, {
    autoFocus: action.autoFocus,
    className: action.secondary ? _fullscreenStyle.default.actionSecondary : undefined,
    color: action.color,
    "data-action-index": index,
    disabled: action.disabled,
    inverted: action.inverted,
    kind: action.kind,
    onClick: handleClick
  }, action.title);
}