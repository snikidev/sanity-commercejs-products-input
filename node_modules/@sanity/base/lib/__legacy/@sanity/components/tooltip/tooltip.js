"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = Tooltip;

var _classnames = _interopRequireDefault(require("classnames"));

var _portal = require("part:@sanity/components/portal");

var _react = _interopRequireWildcard(require("react"));

var _reactPopper = require("react-popper");

var _tooltipArrow = require("./tooltipArrow");

var _hooks = require("./hooks");

var _tooltip = _interopRequireDefault(require("./tooltip.css"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function Tooltip(props) {
  var children = props.children,
      className = props.className,
      content = props.content,
      disabled = props.disabled,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? 'bottom' : _props$placement,
      portalProp = props.portal,
      tone = props.tone,
      restProps = _objectWithoutProperties(props, ["children", "className", "content", "disabled", "placement", "portal", "tone"]);

  var ctx = (0, _hooks.useTooltip)();

  var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      referenceElement = _useState2[0],
      setReferenceElement = _useState2[1];

  var _useState3 = (0, _react.useState)(null),
      _useState4 = _slicedToArray(_useState3, 2),
      popperElement = _useState4[0],
      setPopperElement = _useState4[1];

  var _useState5 = (0, _react.useState)(null),
      _useState6 = _slicedToArray(_useState5, 2),
      arrowElement = _useState6[0],
      setArrowElement = _useState6[1];

  var popper = (0, _reactPopper.usePopper)(referenceElement, popperElement, {
    placement,
    modifiers: [{
      name: 'arrow',
      options: {
        element: arrowElement,
        padding: 4
      }
    }, {
      name: 'preventOverflow',
      options: {
        altAxis: true,
        boundary: ctx.boundaryElement || undefined,
        padding: 4
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 3]
      }
    }, {
      name: 'flip',
      options: {
        allowedAutoPlacements: props.allowedAutoPlacements,
        fallbackPlacements: props.fallbackPlacements
      }
    }]
  });
  var forceUpdate = popper.forceUpdate;

  var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      isOpen = _useState8[0],
      setIsOpen = _useState8[1];

  var handleBlur = (0, _react.useCallback)(() => setIsOpen(false), []);
  var handleFocus = (0, _react.useCallback)(() => setIsOpen(true), []);
  var handleMouseEnter = (0, _react.useCallback)(() => setIsOpen(true), []);
  var handleMouseLeave = (0, _react.useCallback)(() => setIsOpen(false), []);
  (0, _react.useEffect)(() => {
    if (forceUpdate) forceUpdate();
  }, [forceUpdate, content]);

  if (disabled) {
    return children || /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null);
  }

  var popperNode = /*#__PURE__*/_react.default.createElement("div", _extends({}, restProps, {
    className: (0, _classnames.default)(_tooltip.default.root, className),
    "data-tone": tone,
    ref: setPopperElement,
    style: popper.styles.popper
  }, popper.attributes.popper), /*#__PURE__*/_react.default.createElement("div", {
    className: _tooltip.default.card
  }, content), /*#__PURE__*/_react.default.createElement(_tooltipArrow.TooltipArrow, {
    ref: setArrowElement,
    style: popper.styles.arrow,
    tone: tone
  }));

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, children && /*#__PURE__*/_react.default.cloneElement(children, {
    onBlur: handleBlur,
    onFocus: handleFocus,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    ref: setReferenceElement
  }), isOpen && /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, portalProp && /*#__PURE__*/_react.default.createElement(_portal.Portal, null, popperNode), !portalProp && popperNode));
}