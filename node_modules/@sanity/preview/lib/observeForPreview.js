"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeForPreview;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _resolveRefType = _interopRequireDefault(require("./resolveRefType"));

var _prepareForPreview = _interopRequireWildcard(require("./prepareForPreview"));

var _observePaths = _interopRequireDefault(require("./observePaths"));

var _types = require("@sanity/types");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Takes a value and its type and prepares a snapshot for it that can be passed to a preview component
function observeForPreview(value, type, fields, viewOptions) {
  var _type$preview;

  if ((0, _types.isReferenceSchemaType)(type)) {
    // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
    // and the most sane thing to do is to return `null` for snapshot
    if (!value._ref) {
      return (0, _rxjs.of)({
        snapshot: null
      });
    } // Previewing references actually means getting the referenced value,
    // and preview using the preview config of its type
    // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone


    return (0, _resolveRefType.default)(value, type).pipe((0, _operators.switchMap)(refType => refType ? observeForPreview(value, refType, fields) : (0, _rxjs.of)({
      type: type,
      snapshot: null
    })));
  }

  var selection = (_type$preview = type.preview) === null || _type$preview === void 0 ? void 0 : _type$preview.select;

  if (selection) {
    var paths = Object.keys(selection).map(key => selection[key].split('.'));
    return (0, _observePaths.default)(value, paths).pipe((0, _operators.map)(snapshot => ({
      type: type,
      snapshot: snapshot && (0, _prepareForPreview.default)(snapshot, type, viewOptions)
    })));
  }

  return (0, _rxjs.of)({
    type: type,
    snapshot: (0, _prepareForPreview.invokePrepare)(type, value, viewOptions || {})
  });
}