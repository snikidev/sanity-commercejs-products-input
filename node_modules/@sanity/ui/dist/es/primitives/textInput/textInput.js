var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { createElement, forwardRef, isValidElement } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
import { useForwardedRef, useCustomValidity } from '../../hooks';
import { responsiveRadiusStyle, responsiveInputPaddingStyle, textInputStyle, } from '../../styles';
import { Box } from '../box';
import { Card } from '../card';
import { Text } from '../text';
const Root = styled.span(textInputStyle.root);
const InputRoot = styled.span `
  flex: 1;
  min-width: 0;
  display: block;
  position: relative;
`;
const Prefix = styled(Card).attrs({ forwardedAs: 'span' }) `
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
const Suffix = styled(Card).attrs({ forwardedAs: 'span' }) `
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;

  & > span {
    display: block;
    margin: -1px;
  }
`;
const Input = styled.input(responsiveInputPaddingStyle, textInputStyle.input);
const Presentation = styled.span(responsiveRadiusStyle, textInputStyle.representation);
const IconLeftBox = styled(Box) `
  position: absolute;
  top: 0;
  left: 0;
`;
const IconRightBox = styled(Box) `
  position: absolute;
  top: 0;
  right: 0;
`;
export const TextInput = forwardRef((props, forwardedRef) => {
    const { border = true, disabled = false, fontSize = 2, icon, iconRight, padding = 3, prefix, radius = 1, space = 3, suffix, customValidity, type = 'text' } = props, restProps = __rest(props, ["border", "disabled", "fontSize", "icon", "iconRight", "padding", "prefix", "radius", "space", "suffix", "customValidity", "type"]);
    const ref = useForwardedRef(forwardedRef);
    useCustomValidity(ref, customValidity);
    return (React.createElement(Root, null,
        prefix && (React.createElement(Prefix, { borderTop: true, borderLeft: true, borderBottom: true, radius: radius, sizing: "border" },
            React.createElement("span", null, prefix))),
        React.createElement(InputRoot, null,
            React.createElement(Input, Object.assign({ "data-as": "input" }, restProps, { disabled: disabled, iconLeft: Boolean(icon), iconRight: Boolean(iconRight), padding: padding, ref: ref, space: space, fontSize: fontSize, type: type })),
            React.createElement(Presentation, { border: border, hasPrefix: Boolean(prefix), hasSuffix: Boolean(suffix), radius: radius },
                icon && (React.createElement(IconLeftBox, { padding: padding },
                    React.createElement(Text, { size: fontSize },
                        isValidElement(icon) && icon,
                        isValidElementType(icon) && createElement(icon)))),
                iconRight && (React.createElement(IconRightBox, { padding: padding },
                    React.createElement(Text, { size: fontSize },
                        isValidElement(iconRight) && iconRight,
                        isValidElementType(iconRight) && createElement(iconRight)))))),
        suffix && (React.createElement(Suffix, { borderTop: true, borderRight: true, borderBottom: true, radius: radius, sizing: "border" },
            React.createElement("span", null, suffix)))));
});
TextInput.displayName = 'TextInput';
//# sourceMappingURL=textInput.js.map