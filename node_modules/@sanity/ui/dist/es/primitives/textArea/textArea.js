var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useForwardedRef, useCustomValidity } from '../../hooks';
import { getResponsiveProp, responsiveInputPaddingStyle, responsiveRadiusStyle, textInputStyle, } from '../../styles';
const Root = styled.span(textInputStyle.root);
const InputRoot = styled.span `
  flex: 1;
  min-width: 0;
  display: block;
  position: relative;
`;
const Input = styled.textarea(responsiveInputPaddingStyle, textInputStyle.input);
const Presentation = styled.div(responsiveRadiusStyle, textInputStyle.representation);
export const TextArea = forwardRef((props, forwardedRef) => {
    const { border = true, disabled = false, fontSize: fontSizeProp = [2], padding = [3], paddingX, customValidity, paddingY, paddingTop, paddingBottom, paddingLeft, paddingRight, radius = [1] } = props, restProps = __rest(props, ["border", "disabled", "fontSize", "padding", "paddingX", "customValidity", "paddingY", "paddingTop", "paddingBottom", "paddingLeft", "paddingRight", "radius"]);
    const paddingProps = {
        padding,
        paddingX,
        paddingY,
        paddingTop,
        paddingBottom,
        paddingLeft,
        paddingRight,
    };
    const ref = useForwardedRef(forwardedRef);
    useCustomValidity(ref, customValidity);
    const fontSize = getResponsiveProp(fontSizeProp);
    return (React.createElement(Root, null,
        React.createElement(InputRoot, null,
            React.createElement(Input, Object.assign({ "data-as": "textarea" }, restProps, paddingProps, { disabled: disabled, fontSize: fontSize, ref: ref })),
            React.createElement(Presentation, { border: border, radius: radius }))));
});
TextArea.displayName = 'TextArea';
//# sourceMappingURL=textArea.js.map