var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useEffect } from 'react';
import styled from 'styled-components';
import { useForwardedRef } from '../../hooks';
import { switchBaseStyles, switchRepresentationStyles, switchThumbStyles, switchTrackStyles, switchInputStyles, } from './styles';
const Root = styled.span(switchBaseStyles);
const Input = styled.input(switchInputStyles);
const Representation = styled.span(switchRepresentationStyles);
const Track = styled.span(switchTrackStyles);
const Thumb = styled.span(switchThumbStyles);
export const Switch = forwardRef((props, forwardedRef) => {
    const { checked, className, indeterminate, style } = props, restProps = __rest(props, ["checked", "className", "indeterminate", "style"]);
    const ref = useForwardedRef(forwardedRef);
    useEffect(() => {
        if (ref.current) {
            // Set the indeterminate state
            ref.current.indeterminate = indeterminate || false;
        }
    }, [indeterminate, ref]);
    return (React.createElement(Root, { className: className, "data-ui": "Switch", style: style },
        React.createElement(Input, Object.assign({}, restProps, { checked: indeterminate !== true && checked, type: "checkbox", ref: ref })),
        React.createElement(Representation, { "aria-hidden": true, "data-name": "representation" },
            React.createElement(Track, null),
            React.createElement(Thumb, { checked: checked, indeterminate: indeterminate }))));
});
Switch.displayName = 'Switch';
//# sourceMappingURL=switch.js.map