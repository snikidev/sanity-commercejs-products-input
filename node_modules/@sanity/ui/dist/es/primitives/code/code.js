var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import Refractor from 'react-refractor';
import styled from 'styled-components';
import { responsiveCodeFontStyle } from '../../styles';
import { codeBaseStyles } from './styles';
const Root = styled.pre(codeBaseStyles, responsiveCodeFontStyle);
export const Code = forwardRef((props, ref) => {
    const { children, language: languageProp, muted = false, size = 2 } = props, restProps = __rest(props, ["children", "language", "muted", "size"]);
    const language = typeof languageProp === 'string' ? languageProp : undefined;
    const registered = language ? Refractor.hasLanguage(language) : false;
    return (React.createElement(Root, Object.assign({ "data-ui": "Code" }, restProps, { ref: ref, size: size, muted: muted }),
        !(language && registered) && React.createElement("code", null, children),
        language && registered && (React.createElement(Refractor, { inline: true, language: language, value: String(children) }))));
});
Code.displayName = 'Code';
//# sourceMappingURL=code.js.map