var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { CheckmarkIcon, RemoveIcon } from '@sanity/icons';
import React, { forwardRef, useEffect } from 'react';
import styled from 'styled-components';
import { useForwardedRef, useCustomValidity } from '../../hooks';
import { checkboxBaseStyles, inputElementStyles } from './styles';
const Root = styled.div(checkboxBaseStyles);
const Input = styled.input(inputElementStyles);
export const Checkbox = forwardRef((props, forwardedRef) => {
    const { checked, className, indeterminate, customValidity, style } = props, restProps = __rest(props, ["checked", "className", "indeterminate", "customValidity", "style"]);
    const ref = useForwardedRef(forwardedRef);
    useCustomValidity(ref, customValidity);
    useEffect(() => {
        if (ref.current) {
            // Set the indeterminate state
            ref.current.indeterminate = indeterminate || false;
        }
    }, [indeterminate, ref]);
    return (React.createElement(Root, { className: className, "data-ui": "Checkbox", style: style },
        React.createElement(Input, Object.assign({}, restProps, { checked: checked, type: "checkbox", ref: ref })),
        React.createElement("span", null,
            React.createElement(CheckmarkIcon, null),
            React.createElement(RemoveIcon, null))));
});
Checkbox.displayName = 'Checkbox';
//# sourceMappingURL=checkbox.js.map