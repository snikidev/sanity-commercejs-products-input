var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { isValidElementType } from 'react-is';
import styled from 'styled-components';
import { responsiveBoxStyle, responsiveBorderStyle, responsiveFlexItemStyle, responsiveGridItemStyle, responsiveMarginStyle, responsivePaddingStyle, responsiveRadiusStyle, responsiveShadowStyle, } from '../../styles';
import { ThemeColorProvider, useRootTheme } from '../../theme';
import { card } from './styles';
const Root = styled.div(responsiveBoxStyle, responsiveBorderStyle, responsiveGridItemStyle, responsiveFlexItemStyle, responsiveMarginStyle, responsivePaddingStyle, responsiveRadiusStyle, responsiveShadowStyle, card);
export const Card = forwardRef((props, ref) => {
    const { as: asProp, display = 'block', margin = 0, padding = 0, radius = 0, scheme, tone: toneProp = 'default' } = props, restProps = __rest(props, ["as", "display", "margin", "padding", "radius", "scheme", "tone"]);
    const as = isValidElementType(asProp) ? asProp : 'div';
    const rootTheme = useRootTheme();
    const tone = toneProp === 'inherit' ? rootTheme.tone : toneProp;
    return (React.createElement(ThemeColorProvider, { scheme: scheme, tone: tone },
        React.createElement(Root, Object.assign({ "data-as": String(as) || 'div', "data-scheme": rootTheme.scheme, "data-ui": "Card", "data-tone": tone }, restProps, { as: as, display: display, margin: margin, padding: padding, radius: radius, ref: ref, tone: tone }))));
});
Card.displayName = 'Card';
//# sourceMappingURL=card.js.map