var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { ChevronDownIcon } from '@sanity/icons';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useForwardedRef, useCustomValidity } from '../../hooks';
import { Box } from '../box';
import { Text } from '../text';
import { select } from './styles';
const Root = styled.div(select.root);
const Input = styled.select(select.input);
const IconBox = styled(Box)(select.iconBox);
export const Select = forwardRef((props, forwardedRef) => {
    const { children, customValidity, fontSize = 2, padding = 3, radius: radiusProp = 1, space = 3 } = props, restProps = __rest(props, ["children", "customValidity", "fontSize", "padding", "radius", "space"]);
    const ref = useForwardedRef(forwardedRef);
    useCustomValidity(ref, customValidity);
    return (React.createElement(Root, null,
        React.createElement(Input, Object.assign({ "data-ui": "Select" }, restProps, { fontSize: fontSize, padding: padding, radius: radiusProp, ref: ref, space: space }), children),
        React.createElement(IconBox, { padding: padding },
            React.createElement(Text, { size: fontSize },
                React.createElement(ChevronDownIcon, null)))));
});
Select.displayName = 'Select';
//# sourceMappingURL=select.js.map