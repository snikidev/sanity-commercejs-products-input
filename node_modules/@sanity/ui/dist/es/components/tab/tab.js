var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useEffect, useRef } from 'react';
import { useForwardedRef } from '../../hooks';
import { Button } from '../../primitives';
export const Tab = forwardRef((props, forwardedRef) => {
    const { icon, id, focused, label, onClick, onFocus, selected } = props, restProps = __rest(props, ["icon", "id", "focused", "label", "onClick", "onFocus", "selected"]);
    const elementRef = useRef(null);
    const focusedRef = useRef(false);
    const handleBlur = useCallback(() => {
        focusedRef.current = false;
    }, []);
    const handleFocus = useCallback((event) => {
        focusedRef.current = true;
        if (onFocus)
            onFocus(event);
    }, [onFocus]);
    const ref = useForwardedRef(forwardedRef);
    useEffect(() => {
        if (focused && !focusedRef.current) {
            if (elementRef.current)
                elementRef.current.focus();
            focusedRef.current = true;
        }
    }, [focused]);
    const setRef = (el) => {
        elementRef.current = el;
        ref.current = el;
    };
    return (React.createElement(Button, Object.assign({ "data-ui": "Tab" }, restProps, { "aria-selected": selected ? 'true' : 'false', icon: icon, id: id, mode: "bleed", onClick: onClick, onBlur: handleBlur, onFocus: handleFocus, padding: 2, ref: setRef, role: "tab", selected: selected, tabIndex: selected ? 0 : -1, text: label, type: "button" })));
});
Tab.displayName = 'Tab';
//# sourceMappingURL=tab.js.map