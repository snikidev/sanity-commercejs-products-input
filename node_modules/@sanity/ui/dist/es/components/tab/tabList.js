var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useState } from 'react';
import styled from 'styled-components';
import { Inline } from '../../primitives';
const Root = styled.div ``;
export const TabList = forwardRef((props, ref) => {
    const { children, space } = props, restProps = __rest(props, ["children", "space"]);
    const [focusedIndex, setFocusedIndex] = useState(-1);
    const numTabs = children.length;
    const handleTabFocus = useCallback((tabIdx) => {
        setFocusedIndex(tabIdx);
    }, []);
    const handleKeyDown = useCallback((event) => {
        if (event.key === 'ArrowLeft') {
            setFocusedIndex((prevIndex) => (prevIndex + numTabs - 1) % numTabs);
        }
        if (event.key === 'ArrowRight') {
            setFocusedIndex((prevIndex) => (prevIndex + 1) % numTabs);
        }
    }, [numTabs]);
    const tabs = children.map((child, childIndex) => {
        return React.cloneElement(child, {
            focused: focusedIndex === childIndex,
            key: childIndex,
            onFocus: () => handleTabFocus(childIndex),
        });
    });
    return (React.createElement(Root, Object.assign({ "data-ui": "TabList" }, restProps, { onKeyDown: handleKeyDown, ref: ref, role: "tablist" }),
        React.createElement(Inline, { space: space }, tabs)));
});
TabList.displayName = 'TabList';
//# sourceMappingURL=tabList.js.map