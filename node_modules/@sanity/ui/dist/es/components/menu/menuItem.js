var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { createElement, forwardRef, isValidElement, useCallback, useEffect, useRef, } from 'react';
import { isValidElementType } from 'react-is';
import { useForwardedRef } from '../../hooks';
import { Box, Card, Flex, Text } from '../../primitives';
import { useMenu } from './hooks';
export const MenuItem = forwardRef((props, forwardedRef) => {
    const { children, icon, iconRight, onClick, padding = 3, paddingX, paddingY, paddingTop, paddingRight, paddingBottom, paddingLeft, radius = 2, size = 2, space = 3, text } = props, restProps = __rest(props, ["children", "icon", "iconRight", "onClick", "padding", "paddingX", "paddingY", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "radius", "size", "space", "text"]);
    const { mount, onItemClick, onMouseEnter, onMouseLeave } = useMenu();
    const rootRef = useRef(null);
    useEffect(() => mount(rootRef.current), [mount]);
    const ref = useForwardedRef(forwardedRef);
    const handleClick = useCallback((event) => {
        if (onClick)
            onClick(event);
        if (onItemClick)
            onItemClick();
    }, [onClick, onItemClick]);
    const paddingProps = {
        padding,
        paddingX,
        paddingY,
        paddingTop,
        paddingRight,
        paddingBottom,
        paddingLeft,
    };
    function setRef(el) {
        ref.current = el;
        rootRef.current = el;
    }
    return (React.createElement(Card, Object.assign({ as: "button", "data-ui": "MenuItem" }, restProps, { onClick: restProps.disabled ? undefined : handleClick, onMouseEnter: onMouseEnter, onMouseLeave: onMouseLeave, radius: radius, ref: setRef, role: "menuitem", tabIndex: -1, type: "button" }),
        (icon || text || iconRight) && (React.createElement(Box, Object.assign({ as: "span" }, paddingProps),
            React.createElement(Flex, { as: "span" },
                icon && (React.createElement(Text, { size: size },
                    isValidElement(icon) && icon,
                    isValidElementType(icon) && createElement(icon))),
                text && (React.createElement(Box, { flex: 1, marginLeft: icon ? space : undefined, marginRight: iconRight ? space : undefined },
                    React.createElement(Text, { size: size }, text))),
                iconRight && (React.createElement(Text, { size: size },
                    isValidElement(iconRight) && iconRight,
                    isValidElementType(iconRight) && createElement(iconRight)))))),
        children));
});
MenuItem.displayName = 'MenuItem';
//# sourceMappingURL=menuItem.js.map