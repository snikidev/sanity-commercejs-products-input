import { AnimatePresence, motion } from 'framer-motion';
import React, { useCallback, useEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { Box } from '../../primitives';
import { Layer } from '../../utils';
import { Toast } from './toast';
import { ToastContext } from './toastContext';
const Root = styled(Layer) `
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
`;
const ToastContainer = styled.div `
  pointer-events: all;
  box-sizing: border-box;
  position: absolute;
  right: 0;
  bottom: 0;
  max-width: 420px;
  width: 100%;
`;
let toastId = 0;
export function ToastProvider({ children }) {
    const [state, setState] = useState({ toasts: [] });
    const toastsRef = useRef({});
    const push = useCallback((params) => {
        const id = String(toastId++);
        const duration = params.duration || 5000;
        const dismiss = () => {
            var _a;
            const timeoutId = (_a = toastsRef.current[id]) === null || _a === void 0 ? void 0 : _a.timeoutId;
            setState((prevState) => {
                const idx = prevState.toasts.findIndex((t) => t.id === id);
                if (idx > -1) {
                    const toasts = prevState.toasts.slice(0);
                    toasts.splice(idx, 1);
                    return Object.assign(Object.assign({}, prevState), { toasts });
                }
                return prevState;
            });
            if (timeoutId !== undefined) {
                clearTimeout(timeoutId);
                delete toastsRef.current[id];
            }
        };
        setState((prevState) => (Object.assign(Object.assign({}, prevState), { toasts: prevState.toasts.concat([
                {
                    dismiss,
                    id,
                    params: Object.assign(Object.assign({}, params), { duration }),
                },
            ]) })));
        toastsRef.current[id] = { timeoutId: setTimeout(dismiss, duration) };
    }, []);
    // clear timeouts on unmount
    useEffect(() => () => {
        for (const { timeoutId } of Object.values(toastsRef.current)) {
            clearTimeout(timeoutId);
        }
        toastsRef.current = {};
    }, []);
    return (React.createElement(ToastContext.Provider, { value: { push } },
        children,
        React.createElement(Root, { "data-ui": "ToastProvider" },
            React.createElement(ToastContainer, null,
                React.createElement(Box, { padding: 4 },
                    React.createElement(AnimatePresence, { initial: false }, state.toasts.map(({ dismiss, id, params }) => (React.createElement(motion.div, { animate: { opacity: 1, y: 0, scale: 1 }, exit: { opacity: 0, scale: 0.5, transition: { duration: 0.2 } }, initial: { opacity: 0, y: 32, scale: 0.25 }, key: id, layout: "position", transition: { type: 'spring', damping: 30, stiffness: 400 } },
                        React.createElement(Toast, { closable: params.closable, description: params.description, onClose: dismiss, status: params.status, title: params.title }))))))))));
}
//# sourceMappingURL=toastProvider.js.map