var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { useTheme } from '../../theme';
import { ResizeObserver } from '../resizeObserver';
import { findMaxBreakpoints, findMinBreakpoints } from './helpers';
export function ElementQuery(props) {
    const theme = useTheme();
    const { media } = theme.sanity;
    const { children } = props, restProps = __rest(props, ["children"]);
    const rootRef = useRef(null);
    const [width, setWidth] = useState(() => {
        return window.innerWidth;
    });
    useEffect(() => {
        let ro;
        if (rootRef.current) {
            const handleResizeEntries = (entries) => {
                setWidth(entries[0].contentRect.width);
            };
            ro = new ResizeObserver(handleResizeEntries);
            ro.observe(rootRef.current);
        }
        return () => {
            if (ro)
                ro.disconnect();
        };
    }, []);
    const max = useMemo(() => findMaxBreakpoints(media, width), [media, width]);
    const min = useMemo(() => findMinBreakpoints(media, width), [media, width]);
    return (React.createElement("div", Object.assign({}, restProps, { "data-eq-max": max.length ? max.join(' ') : undefined, "data-eq-min": min.length ? min.join(' ') : undefined, ref: rootRef }), children));
}
//# sourceMappingURL=elementQuery.js.map