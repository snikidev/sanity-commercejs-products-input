import { getResponsiveProp, rem, responsive } from '../helpers';
const GRID_CSS = { '&:not([hidden])': { display: 'grid' } };
const GRID_AUTO_COLUMS = {
    auto: 'auto',
    min: 'min-content',
    max: 'max-content',
    fr: 'minmax(0, 1fr)',
};
const GRID_AUTO_ROWS = {
    auto: 'auto',
    min: 'min-content',
    max: 'max-content',
    fr: 'minmax(0, 1fr)',
};
export function responsiveGridStyle() {
    return [
        GRID_CSS,
        responsiveGridAutoFlowStyle,
        responsiveGridAutoRowsStyle,
        responsiveGridAutoColsStyle,
        responsiveGridColumnsStyle,
        responsiveGridRowsStyle,
        responsiveGridGapStyle,
        responsiveGridGapXStyle,
        responsiveGridGapYStyle,
    ];
}
function responsiveGridAutoFlowStyle(props) {
    const { theme } = props;
    const { media } = theme.sanity;
    return responsive(media, getResponsiveProp(props.autoFlow), (autoFlow) => ({
        gridAutoFlow: autoFlow,
    }));
}
function responsiveGridAutoRowsStyle(props) {
    const { theme } = props;
    const { media } = theme.sanity;
    return responsive(media, getResponsiveProp(props.autoRows), (autoRows) => ({
        gridAutoRows: autoRows && GRID_AUTO_ROWS[autoRows],
    }));
}
function responsiveGridAutoColsStyle(props) {
    const { theme } = props;
    const { media } = theme.sanity;
    return responsive(media, getResponsiveProp(props.autoCols), (autoCols) => ({
        gridAutoColumns: autoCols && GRID_AUTO_COLUMS[autoCols],
    }));
}
function responsiveGridColumnsStyle(props) {
    const { theme } = props;
    const { media } = theme.sanity;
    return responsive(media, getResponsiveProp(props.columns), (columns) => ({
        gridTemplateColumns: columns && `repeat(${columns},minmax(0,1fr));`,
    }));
}
function responsiveGridRowsStyle(props) {
    const { theme } = props;
    const { media } = theme.sanity;
    return responsive(media, getResponsiveProp(props.rows), (rows) => ({
        gridTemplateRows: rows && `repeat(${rows},minmax(0,1fr));`,
    }));
}
function responsiveGridGapStyle(props) {
    const { theme } = props;
    const { media, space } = theme.sanity;
    return responsive(media, getResponsiveProp(props.gap), (gap) => ({
        gridGap: gap ? rem(space[gap]) : undefined,
    }));
}
function responsiveGridGapXStyle(props) {
    const { theme } = props;
    const { media, space } = theme.sanity;
    return responsive(media, getResponsiveProp(props.gapX), (gapX) => ({
        columnGap: gapX ? rem(space[gapX]) : undefined,
    }));
}
function responsiveGridGapYStyle(props) {
    const { theme } = props;
    const { media, space } = theme.sanity;
    return responsive(media, getResponsiveProp(props.gapY), (gapY) => ({
        rowGap: gapY ? rem(space[gapY]) : undefined,
    }));
}
//# sourceMappingURL=gridStyle.js.map