export function fillCSSObject(propKeys, value) {
    return propKeys.reduce((obj, propKey) => {
        obj[propKey] = value;
        return obj;
    }, {});
}
export function rem(pixelValue) {
    if (pixelValue === 0)
        return 0;
    return `${pixelValue / 16}rem`;
}
export function responsive(media, values, callback) {
    const statements = values.map(callback);
    return statements.map((statement, mediaIndex) => {
        if (mediaIndex === 0)
            return statement;
        return { [`@media screen and (min-width: ${media[mediaIndex - 1]}px)`]: statement };
    });
}
export function getResponsiveProp(val, defaultVal = []) {
    if (val === undefined)
        return defaultVal;
    return Array.isArray(val) ? val : [val];
}
export function getResponsiveSpace(theme, props, spaceIndexes = []) {
    if (!Array.isArray(spaceIndexes)) {
        throw new Error('the property must be array of numbers');
    }
    if (spaceIndexes.length === 0) {
        return null;
    }
    return responsive(theme.sanity.media, spaceIndexes, (spaceIndex) => fillCSSObject(props, rem(theme.sanity.space[spaceIndex])));
}
//# sourceMappingURL=helpers.js.map