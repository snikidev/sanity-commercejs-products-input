"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.responsiveFlexDirectionStyle = exports.responsiveFlexJustifyStyle = exports.responsiveFlexWrapStyle = exports.responsiveFlexAlignStyle = exports.responsiveFlexStyle = void 0;
var helpers_1 = require("../helpers");
function responsiveFlexStyle(props) {
    return __spreadArrays([
        { '&:not([hidden])': { display: 'flex' } }
    ], responsiveFlexAlignStyle(props), responsiveFlexWrapStyle(props), responsiveFlexJustifyStyle(props), responsiveFlexDirectionStyle(props));
}
exports.responsiveFlexStyle = responsiveFlexStyle;
function responsiveFlexAlignStyle(props) {
    var theme = props.theme;
    var media = theme.sanity.media;
    return helpers_1.responsive(media, helpers_1.getResponsiveProp(props.align), function (align) {
        return { alignItems: align };
    });
}
exports.responsiveFlexAlignStyle = responsiveFlexAlignStyle;
function responsiveFlexWrapStyle(props) {
    var theme = props.theme;
    var media = theme.sanity.media;
    return helpers_1.responsive(media, helpers_1.getResponsiveProp(props.wrap), function (wrap) {
        return { flexWrap: wrap };
    });
}
exports.responsiveFlexWrapStyle = responsiveFlexWrapStyle;
function responsiveFlexJustifyStyle(props) {
    var theme = props.theme;
    var media = theme.sanity.media;
    return helpers_1.responsive(media, helpers_1.getResponsiveProp(props.justify), function (justify) {
        return { justifyContent: justify };
    });
}
exports.responsiveFlexJustifyStyle = responsiveFlexJustifyStyle;
function responsiveFlexDirectionStyle(props) {
    var theme = props.theme;
    var media = theme.sanity.media;
    return helpers_1.responsive(media, helpers_1.getResponsiveProp(props.direction), function (direction) {
        if (typeof direction !== 'string')
            return {};
        if (direction && direction.startsWith('column')) {
            return { flexDirection: direction, '&>*': { minHeight: 0 } };
        }
        return { flexDirection: direction, '&>*': { minWidth: 0 } };
    });
}
exports.responsiveFlexDirectionStyle = responsiveFlexDirectionStyle;
//# sourceMappingURL=flexStyle.js.map