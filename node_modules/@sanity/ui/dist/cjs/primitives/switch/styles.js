"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.switchThumbStyles = exports.switchTrackStyles = exports.switchRepresentationStyles = exports.switchInputStyles = exports.switchBaseStyles = void 0;
var styled_components_1 = require("styled-components");
var styles_1 = require("../../styles");
var focusRing_1 = require("../../styles/_internal/focusRing");
/* Root */
function switchBaseStyles() {
    return styled_components_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    position: relative;\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "], ["\n    position: relative;\n    &:not([hidden]) {\n      display: inline-block;\n    }\n  "])));
}
exports.switchBaseStyles = switchBaseStyles;
/* Input */
function switchInputStyles() {
    // Visually hide the input element while keeping it interactive
    return styled_components_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    padding: 0;\n    margin: 0;\n\n    /* Place the input element above the representation element */\n    z-index: 1;\n  "], ["\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    height: 100%;\n    width: 100%;\n    outline: none;\n    padding: 0;\n    margin: 0;\n\n    /* Place the input element above the representation element */\n    z-index: 1;\n  "])));
}
exports.switchInputStyles = switchInputStyles;
/* Representation */
function switchRepresentationStyles(props) {
    var theme = props.theme;
    var _a = theme.sanity, focusRing = _a.focusRing, input = _a.input;
    var color = theme.sanity.color.button.default;
    return styled_components_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    --switch-bg-color: ", ";\n    --switch-fg-color: ", ";\n\n    &:not([hidden]) {\n      display: block;\n    }\n    position: relative;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n\n    /* Make sure it\u2019s not possible to interact with the wrapper element */\n    pointer-events: none;\n\n    /* Focus styles */\n    input:focus + & {\n      box-shadow: ", ";\n    }\n\n    input:focus:not(:focus-visible) + & {\n      box-shadow: none;\n    }\n\n    input:hover + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    input:checked + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    input:checked:hover + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    input:disabled + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n  "], ["\n    --switch-bg-color: ", ";\n    --switch-fg-color: ", ";\n\n    &:not([hidden]) {\n      display: block;\n    }\n    position: relative;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n\n    /* Make sure it\u2019s not possible to interact with the wrapper element */\n    pointer-events: none;\n\n    /* Focus styles */\n    input:focus + & {\n      box-shadow: ", ";\n    }\n\n    input:focus:not(:focus-visible) + & {\n      box-shadow: none;\n    }\n\n    input:hover + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    input:checked + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    input:checked:hover + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n\n    input:disabled + & {\n      --switch-bg-color: ", ";\n      --switch-fg-color: ", ";\n    }\n  "])), color.default.enabled.bg, color.default.enabled.fg, styles_1.rem(input.switch.width), styles_1.rem(input.switch.height), styles_1.rem(input.switch.height / 2), focusRing_1.focusRingStyle({ focusRing: focusRing }), color.default.hovered.bg, color.default.hovered.fg, color.positive.enabled.bg, color.positive.enabled.fg, color.positive.hovered.bg, color.positive.hovered.fg, color.default.disabled.fg, color.default.disabled.bg);
}
exports.switchRepresentationStyles = switchRepresentationStyles;
/* Track */
function switchTrackStyles(props) {
    var theme = props.theme;
    var input = theme.sanity.input;
    return styled_components_1.css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n    &&:not([hidden]) {\n      display: block;\n    }\n    background: var(--switch-bg-color);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n  "], ["\n    &&:not([hidden]) {\n      display: block;\n    }\n    background: var(--switch-bg-color);\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: ", ";\n    height: ", ";\n    border-radius: ", ";\n  "])), styles_1.rem(input.switch.width), styles_1.rem(input.switch.height), styles_1.rem(input.switch.height / 2));
}
exports.switchTrackStyles = switchTrackStyles;
/* Thumb */
function switchThumbStyles(props) {
    var indeterminate = props.indeterminate, theme = props.theme;
    var input = theme.sanity.input;
    var trackWidth = input.switch.width;
    var trackHeight = input.switch.height;
    var trackPadding = input.switch.padding;
    var size = trackHeight - input.switch.padding * 2;
    var checkedOffset = trackWidth - trackPadding * 2 - size;
    var indeterminateOffset = trackWidth / 2 - size / 2 - trackPadding;
    var checked = indeterminate !== true && props.checked === true;
    return styled_components_1.css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n    &&:not([hidden]) {\n      display: block;\n    }\n    position: absolute;\n    left: ", ";\n    top: ", ";\n    height: ", ";\n    width: ", ";\n    border-radius: ", ";\n    transition-property: transform;\n    transition-duration: ", "ms;\n    transition-timing-function: ", ";\n    background: var(--switch-fg-color);\n    transform: translate3d(0, 0, 0);\n\n    ", "\n\n    ", "\n  "], ["\n    &&:not([hidden]) {\n      display: block;\n    }\n    position: absolute;\n    left: ", ";\n    top: ", ";\n    height: ", ";\n    width: ", ";\n    border-radius: ", ";\n    transition-property: transform;\n    transition-duration: ", "ms;\n    transition-timing-function: ", ";\n    background: var(--switch-fg-color);\n    transform: translate3d(0, 0, 0);\n\n    ",
        "\n\n    ",
        "\n  "])), styles_1.rem(trackPadding), styles_1.rem(trackPadding), styles_1.rem(size), styles_1.rem(size), styles_1.rem(size / 2), input.switch.transitionDurationMs, input.switch.transitionTimingFunction, checked && styled_components_1.css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n      transform: translate3d(", "px, 0, 0);\n    "], ["\n      transform: translate3d(", "px, 0, 0);\n    "])), checkedOffset), indeterminate && styled_components_1.css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n      transform: translate3d(", "px, 0, 0);\n    "], ["\n      transform: translate3d(", "px, 0, 0);\n    "])), indeterminateOffset));
}
exports.switchThumbStyles = switchThumbStyles;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7;
//# sourceMappingURL=styles.js.map