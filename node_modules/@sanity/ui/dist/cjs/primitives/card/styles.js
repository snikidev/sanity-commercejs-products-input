"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cardColorStyles = exports.cardBaseStyles = exports.card = void 0;
var styled_components_1 = require("styled-components");
function card(props) {
    return [cardBaseStyles, cardColorStyles(props)];
}
exports.card = card;
function cardBaseStyles() {
    return styled_components_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n\n    /* &:is(pre) */\n    &[data-as='pre'] {\n      font: inherit;\n    }\n  "], ["\n    &[data-as='button'] {\n      -webkit-font-smoothing: inherit;\n      appearance: none;\n      outline: none;\n      font: inherit;\n      text-align: inherit;\n      border: 0;\n      width: stretch;\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      text-decoration: none;\n    }\n\n    /* &:is(pre) */\n    &[data-as='pre'] {\n      font: inherit;\n    }\n  "])));
}
exports.cardBaseStyles = cardBaseStyles;
function vars(base, color) {
    // Custom properties that may be used by other atoms
    return styled_components_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    --card-bg-color: ", ";\n    --card-fg-color: ", ";\n    --card-focus-ring-color: ", ";\n    --card-border-color: ", ";\n    --card-muted-fg-color: ", ";\n    --card-accent-fg-color: ", ";\n    --card-link-fg-color: ", ";\n    --card-code-bg-color: ", ";\n    --card-code-fg-color: ", ";\n\n    /* @todo: deprecate */\n    --card-link-color: ", ";\n    --card-hairline-soft-color: ", ";\n    --card-hairline-hard-color: ", ";\n\n    /* @todo: rename to \"--base-\"? */\n    --card-shadow-outline-color: ", ";\n    --card-shadow-umbra-color: ", ";\n    --card-shadow-penumbra-color: ", ";\n    --card-shadow-ambient-color: ", ";\n  "], ["\n    --card-bg-color: ", ";\n    --card-fg-color: ", ";\n    --card-focus-ring-color: ", ";\n    --card-border-color: ", ";\n    --card-muted-fg-color: ", ";\n    --card-accent-fg-color: ", ";\n    --card-link-fg-color: ", ";\n    --card-code-bg-color: ", ";\n    --card-code-fg-color: ", ";\n\n    /* @todo: deprecate */\n    --card-link-color: ", ";\n    --card-hairline-soft-color: ", ";\n    --card-hairline-hard-color: ", ";\n\n    /* @todo: rename to \"--base-\"? */\n    --card-shadow-outline-color: ", ";\n    --card-shadow-umbra-color: ", ";\n    --card-shadow-penumbra-color: ", ";\n    --card-shadow-ambient-color: ", ";\n  "])), color.bg, color.fg, base.focusRing, color.border, color.muted.fg, color.accent.fg, color.link.fg, color.code.bg, color.code.fg, color.link.fg, color.border, color.border, base.shadow.outline, base.shadow.umbra, base.shadow.penumbra, base.shadow.ambient);
}
function cardColorStyles(props) {
    var _a, _b;
    var theme = props.theme;
    var _c = theme.sanity.color, base = _c.base, card = _c.card;
    return styled_components_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        @media (hover: hover) {\n          &:hover {\n            ", "\n          }\n\n          &:active {\n            ", "\n          }\n        }\n\n        &:focus {\n          ", "\n        }\n\n        &[aria-pressed='true'],\n        [aria-selected='true'] > & {\n          ", "\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        @media (hover: hover) {\n          outline: none;\n\n          &:hover {\n            ", "\n          }\n\n          &:active {\n            ", "\n          }\n        }\n\n        &:focus {\n          ", "\n        }\n\n        [aria-selected='true'] > & {\n          ", "\n        }\n      }\n    }\n\n    ", "\n  "], ["\n    ", "\n\n    background-color: var(--card-bg-color);\n    color: var(--card-fg-color);\n\n    /* &:is(button) */\n    &[data-as='button'] {\n      &:disabled {\n        ", "\n      }\n\n      &:not(:disabled) {\n        @media (hover: hover) {\n          &:hover {\n            ", "\n          }\n\n          &:active {\n            ", "\n          }\n        }\n\n        &:focus {\n          ", "\n        }\n\n        &[aria-pressed='true'],\n        [aria-selected='true'] > & {\n          ", "\n        }\n      }\n    }\n\n    /* &:is(a) */\n    &[data-as='a'] {\n      &[data-disabled] {\n        ", "\n      }\n\n      &:not([data-disabled]) {\n        @media (hover: hover) {\n          outline: none;\n\n          &:hover {\n            ", "\n          }\n\n          &:active {\n            ", "\n          }\n        }\n\n        &:focus {\n          ", "\n        }\n\n        [aria-selected='true'] > & {\n          ", "\n        }\n      }\n    }\n\n    ", "\n  "])), vars(base, card.enabled), vars(base, card.disabled), vars(base, card.hovered), vars(base, card.pressed), vars(base, card.selected), vars(base, card.selected), vars(base, card.disabled), vars(base, card.hovered), vars(base, card.pressed), vars(base, card.selected), vars(base, card.selected), (_b = (_a = theme.sanity.styles) === null || _a === void 0 ? void 0 : _a.card) === null || _b === void 0 ? void 0 : _b.root);
}
exports.cardColorStyles = cardColorStyles;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=styles.js.map